[{"/Users/remyboire/Documents/github/scrimba/quizzical/src/index.js":"1","/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js":"2","/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js":"3","/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Start.js":"4","/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Options.js":"5","/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Results.js":"6"},{"size":163,"mtime":1648837673449,"results":"7","hashOfConfig":"8"},{"size":8213,"mtime":1649066788311,"results":"9","hashOfConfig":"8"},{"size":943,"mtime":1649066711370,"results":"10","hashOfConfig":"8"},{"size":795,"mtime":1649063238747,"results":"11","hashOfConfig":"8"},{"size":4107,"mtime":1649066699418,"results":"12","hashOfConfig":"8"},{"size":1079,"mtime":1649060823261,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"nrtx7j",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"29"},"/Users/remyboire/Documents/github/scrimba/quizzical/src/index.js",[],[],["37","38"],"/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js",["39","40","41","42","43"],[],"import React from 'react'\nimport './App.css'\nimport Question from './components/Question'\nimport Start from './components/Start'\nimport Options from './components/Options'\nimport Results from './components/Results'\nimport { nanoid } from 'nanoid'\n\nexport default function App() {\n\t// Get a unique token in order to do not have repeted questions\n\tconst [token, setToken] = React.useState(localStorage.getItem('token'))\n\tasync function getToken() {\n\t\tfetch('https://opentdb.com/api_token.php?command=request')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetToken(data.token)\n\t\t\t\treturn localStorage.setItem('token', token)\n\t\t\t})\n\t\t\t.catch((error) => console.log(error))\n\t}\n\tReact.useEffect(() => {\n\t\tif (!token) {\n\t\t\tgetToken()\n\t\t}\n\t}, [])\n\tconsole.log(token)\n\n\t// Get stored options from local storage or set default values\n\tconst [options, setOptions] = React.useState(JSON.parse(localStorage.getItem('options')))\n\n\tReact.useEffect(() => {\n\t\tif (!options) {\n\t\t\tsetOptions({\n\t\t\t\tvisible: false,\n\t\t\t\tdifficulty: '',\n\t\t\t\tcategory: '',\n\t\t\t\tamount: '5',\n\t\t\t\ttype: '',\n\t\t\t})\n\t\t}\n\t}, [])\n\tReact.useEffect(() => {\n\t\tlocalStorage.setItem('options', JSON.stringify(options))\n\t}, [options])\n\n\t// Get questions\n\tconst [questions, setQuestions] = React.useState([])\n\tReact.useEffect(() => {\n\t\tgetQuestions()\n\t}, [options.difficulty, options.amount, options.category, options.type])\n\n\tconst [selectedAnswers, setSelectedAnswers] = React.useState([])\n\tconst [isChecked, setIsChecked] = React.useState(false)\n\tconst [score, setScore] = React.useState({})\n\tconst [turn, setTurn] = React.useState(0)\n\tconst [startScreen, setStartScreen] = React.useState(true)\n\n\tconst categories = [\n\t\t{ name: 'all', id: 'all' },\n\t\t{ name: 'General Knowledge', id: 9 },\n\t\t{ name: 'Entertainment: Books', id: 10 },\n\t\t{ name: 'Entertainment: Film', id: 11 },\n\t\t{ name: 'Entertainment: Music', id: 12 },\n\t\t{ name: 'Entertainment: Musicals & Theatres', id: 13 },\n\t\t{ name: 'Entertainment: Television', id: 14 },\n\t\t{ name: 'Entertainment: Video Games', id: 15 },\n\t\t{ name: 'Entertainment: Board Games', id: 16 },\n\t\t{ name: 'Science & Nature', id: 17 },\n\t\t{ name: 'Science: Computers', id: 18 },\n\t\t{ name: 'Science: Mathematics', id: 19 },\n\t\t{ name: 'Mythology', id: 20 },\n\t\t{ name: 'Sports', id: 21 },\n\t\t{ name: 'Geography', id: 22 },\n\t\t{ name: 'History', id: 23 },\n\t\t{ name: 'Politics', id: 24 },\n\t\t{ name: 'Art', id: 25 },\n\t\t{ name: 'Celebrities', id: 26 },\n\t\t{ name: 'Animals', id: 27 },\n\t\t{ name: 'Vehicles', id: 28 },\n\t\t{ name: 'Entertainment: Comics', id: 29 },\n\t\t{ name: 'Science: Gadgets', id: 30 },\n\t\t{ name: 'Entertainment: Japanese Anime & Manga', id: 31 },\n\t\t{ name: 'Entertainment: Cartoon & Animations', id: 32 },\n\t]\n\n\tfunction getCategory(category) {\n\t\tswitch (category) {\n\t\t\tcase '9':\n\t\t\t\treturn 'General Knowledge'\n\t\t\tcase '10':\n\t\t\t\treturn 'Entertainment: Books'\n\t\t\tcase '11':\n\t\t\t\treturn 'Entertainment: Film'\n\t\t\tcase '12':\n\t\t\t\treturn 'Entertainment: Music'\n\t\t\tcase '13':\n\t\t\t\treturn 'Entertainment: Musicals & Theatres'\n\t\t\tcase '14':\n\t\t\t\treturn 'Entertainment: Television'\n\t\t\tcase '15':\n\t\t\t\treturn 'Entertainment: Video Games'\n\t\t\tcase '16':\n\t\t\t\treturn 'Entertainment: Board Games'\n\t\t\tcase '17':\n\t\t\t\treturn 'Science & Nature'\n\t\t\tcase '18':\n\t\t\t\treturn 'Science: Computers'\n\t\t\tcase '19':\n\t\t\t\treturn 'Science: Mathematics'\n\t\t\tcase '20':\n\t\t\t\treturn 'Mythology'\n\t\t\tcase '21':\n\t\t\t\treturn 'Sports'\n\t\t\tcase '22':\n\t\t\t\treturn 'Geography'\n\t\t\tcase '23':\n\t\t\t\treturn 'History'\n\t\t\tcase '24':\n\t\t\t\treturn 'Politics'\n\t\t\tcase '25':\n\t\t\t\treturn 'Art'\n\t\t\tcase '26':\n\t\t\t\treturn 'Celebrities'\n\t\t\tcase '27':\n\t\t\t\treturn 'Animals'\n\t\t\tcase '28':\n\t\t\t\treturn 'Vehicles'\n\t\t\tcase '29':\n\t\t\t\treturn 'Entertainment: Comics'\n\t\t\tcase '30':\n\t\t\t\treturn 'Science: Gadgets'\n\t\t\tcase '31':\n\t\t\t\treturn 'Entertainment: Japanese Anime & Manga'\n\t\t\tcase '32':\n\t\t\t\treturn 'Entertainment: Cartoon & Animations'\n\t\t}\n\t}\n\t// console.log(score)\n\t// get data from api and return it\n\tfunction getQuestions() {\n\t\t// fetch from api\n\t\tconst amount = options.amount\n\t\tconst difficulty = options.difficulty\n\t\tconst type = options.type\n\t\tconst category = options.category === 'all' ? '' : options.category\n\t\tconst url = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=${type}&category=${category}&token=${token}`\n\t\tconsole.log('fetch from', url)\n\n\t\tfetch(url)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tdata.response_code === 3 ?? getToken()\n\t\t\t\tdata.response_code === 4 ?? getToken()\n\t\t\t\tdata.results.forEach((question) => {\n\t\t\t\t\tquestion.incorrect_answers.push(question.correct_answer)\n\t\t\t\t\tquestion.incorrect_answers = question.incorrect_answers.sort()\n\t\t\t\t})\n\t\t\t\tsetQuestions(data.results)\n\t\t\t})\n\t\t\t.catch((error) => console.log(error))\n\t}\n\n\tfunction handleOptionsChange(event) {\n\t\tsetOptions((prevOptions) => {\n\t\t\treturn {\n\t\t\t\t...prevOptions,\n\t\t\t\t[event.target.name]: event.target.value,\n\t\t\t}\n\t\t})\n\t}\n\tfunction toggleOptions() {\n\t\tsetOptions((prevOptions) => {\n\t\t\treturn {\n\t\t\t\t...prevOptions,\n\t\t\t\tvisible: !prevOptions.visible,\n\t\t\t}\n\t\t})\n\t}\n\n\tfunction toggleStartScreen() {\n\t\tsetStartScreen((prevStartScreen) => {\n\t\t\treturn !prevStartScreen\n\t\t})\n\t}\n\n\tfunction handleQuestionClick(questionId, answer) {\n\t\tif (!isChecked) {\n\t\t\tsetSelectedAnswers((prevState) => {\n\t\t\t\tconst newState = { ...prevState }\n\t\t\t\tnewState[questionId] = answer\n\t\t\t\treturn newState\n\t\t\t})\n\t\t}\n\t}\n\n\t// compare answers with correct answer\n\tfunction checkAnswers() {\n\t\tif (Object.getOwnPropertyNames(selectedAnswers).length === questions.length) {\n\t\t\tsetIsChecked(true)\n\t\t\tconst correctAnswers = questions.map((question) => question.correct_answer)\n\t\t\tlet count = 0\n\t\t\tObject.keys(selectedAnswers).map((key) => {\n\t\t\t\tif (selectedAnswers[key] === correctAnswers[key]) {\n\t\t\t\t\treturn count++\n\t\t\t\t}\n\t\t\t})\n\t\t\tsetScore((prevState) => {\n\t\t\t\tconst newState = { ...prevState }\n\t\t\t\tnewState[turn] = {\n\t\t\t\t\tturn: turn,\n\t\t\t\t\tcorrectsAnswers: count,\n\t\t\t\t\tquestions: questions.length,\n\t\t\t\t}\n\t\t\t\treturn newState\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction restartGame() {\n\t\tsetTurn((prevTurn) => prevTurn + 1)\n\t\tsetIsChecked(false)\n\t\tsetSelectedAnswers([])\n\t\tgetQuestions()\n\t}\n\n\t// map questions to question components\n\t// console.log(questions)\n\n\t// take all scores from score object and add them in a total score const\n\tconst totalScore = Object.values(score).reduce((acc, curr) => {\n\t\treturn acc + curr.correctsAnswers\n\t}, 0)\n\tconst totalQuestions = Object.values(score).reduce((acc, curr) => {\n\t\treturn acc + curr.questions\n\t}, 0)\n\tconst totalTurns = Object.keys(score).length\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t{startScreen && <Start options={options} toggleOptions={toggleOptions} toggleStartScreen={toggleStartScreen} getCategory={getCategory} />}\n\t\t\t{options.visible && (\n\t\t\t\t<Options options={options} toggleOptions={toggleOptions} handleOptionsChange={handleOptionsChange} getCategory={getCategory} categories={categories} />\n\t\t\t)}\n\t\t\t{!startScreen &&\n\t\t\t\tquestions.map((question) => (\n\t\t\t\t\t<Question\n\t\t\t\t\t\tclassName={options.visible ? 'hidden' : ''}\n\t\t\t\t\t\tkey={nanoid()}\n\t\t\t\t\t\tid={questions.indexOf(question)}\n\t\t\t\t\t\tquestion={question.question}\n\t\t\t\t\t\tcategory={question.category}\n\t\t\t\t\t\tcorrect_answer={question.correct_answer}\n\t\t\t\t\t\tincorrect_answers={question.incorrect_answers}\n\t\t\t\t\t\tanswers={question.answers}\n\t\t\t\t\t\thandleQuestionClick={handleQuestionClick}\n\t\t\t\t\t\tselectedAnswer={selectedAnswers[questions.indexOf(question)]}\n\t\t\t\t\t\tisChecked={isChecked}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t{/* {!startScreen && Object.getOwnPropertyNames(selectedAnswers).length !== questions.length && <button className='check'>Check answers</button>} */}\n\t\t\t{!startScreen && (\n\t\t\t\t<button type='submit' className={options.visible ? 'check hidden' : 'check'} onClick={isChecked ? restartGame : checkAnswers}>\n\t\t\t\t\t{isChecked ? 'Restart' : 'Check answers'}\n\t\t\t\t</button>\n\t\t\t)}\n\t\t\t{/* \n\t\t\t\t<button className={options.visible ? 'check hidden' : 'check'} onClick={isChecked ? restartGame : checkAnswers}>\n\t\t\t\t\t{isChecked ? 'Restart' : 'Check answers'}\n\t\t\t\t</button> */}\n\t\t\t{!startScreen && (\n\t\t\t\t<Results\n\t\t\t\t\toptions={options}\n\t\t\t\t\ttoggleOptions={toggleOptions}\n\t\t\t\t\tgetCategory={getCategory}\n\t\t\t\t\tscore={totalScore}\n\t\t\t\t\ttotalQuestions={totalQuestions}\n\t\t\t\t\ttotalTurns={totalTurns}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n","/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js",[],[],"/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Start.js",["44"],[],"import React from 'react'\nimport './start.css'\n\nexport default function Start(props) {\n\tconst questions = props.options.amount === 1 ? `1 question` : `${props.options.amount} questions`\n\tconst category = props.options.category === '' ? `all categories` : `${props.getCategory(props.options.category)} category`\n\tconst difficulty = props.options.difficulty === '' ? `any difficulty` : `${props.options.difficulty} difficulty`\n\treturn (\n\t\t<div className='start'>\n\t\t\t<h1>Welcome to the Quiz!</h1>\n\t\t\t<h2>Click the button below to start the quiz!</h2>\n\t\t\t<small className='optionsSelect'>\n\t\t\t\tYou will answer {questions} in {category} with {difficulty}. <a onClick={props.toggleOptions}>(change options)</a>\n\t\t\t</small>\n\t\t\t<button onClick={props.toggleStartScreen}>Start Quiz</button>\n\t\t</div>\n\t)\n}\n",["45","46"],"/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Options.js",["47"],[],"/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Results.js",["48"],[],"import React from 'react'\nimport './results.css'\n\nexport default function Results(props) {\n\tconst questions = props.options.amount === 1 ? `1 question` : `${props.options.amount} questions`\n\tconst category = props.options.category === 'All' ? `all categories` : `${props.getCategory(props.options.category)} category`\n\tconst difficulty = props.options.difficulty === '' ? `any difficulty` : `${props.options.difficulty} difficulty`\n\treturn (\n\t\t<div>\n\t\t\t<div className='results'>\n\t\t\t\t<h1>Results</h1>\n\t\t\t\t<span>\n\t\t\t\t\tYou scored {props.score} / {props.totalQuestions} in {props.totalTurns} turns\n\t\t\t\t</span>\n\t\t\t</div>\n\t\t\t<small className='optionsSelect'>\n\t\t\t\tYou are playing rounds of {questions} in {category} with {difficulty}. <a onClick={props.toggleOptions}>(change options)</a>\n\t\t\t</small>\n\t\t</div>\n\t)\n}\n\n// export default function Start(props) {\n\n// \treturn (\n// \t\t<div className='start'>\n// \t\t\t<h1>Welcome to the Quiz!</h1>\n// \t\t\t<h2>Click the button below to start the quiz!</h2>\n\n// \t\t\t<button onClick={props.toggleStartScreen}>Start Quiz</button>\n// \t\t</div>\n// \t)\n// }\n",{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"53","severity":1,"message":"54","line":25,"column":5,"nodeType":"55","endLine":25,"endColumn":7,"suggestions":"56"},{"ruleId":"53","severity":1,"message":"57","line":41,"column":5,"nodeType":"55","endLine":41,"endColumn":7,"suggestions":"58"},{"ruleId":"53","severity":1,"message":"59","line":50,"column":5,"nodeType":"55","endLine":50,"endColumn":73,"suggestions":"60"},{"ruleId":"61","severity":1,"message":"62","line":87,"column":3,"nodeType":"63","messageId":"64","endLine":136,"endColumn":4},{"ruleId":"65","severity":1,"message":"66","line":202,"column":43,"nodeType":"67","messageId":"68","endLine":202,"endColumn":45},{"ruleId":"69","severity":1,"message":"70","line":13,"column":66,"nodeType":"71","endLine":13,"endColumn":99},{"ruleId":"49","replacedBy":"72"},{"ruleId":"51","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":62,"column":41,"nodeType":"76","messageId":"77","endLine":62,"endColumn":43},{"ruleId":"69","severity":1,"message":"70","line":17,"column":76,"nodeType":"71","endLine":17,"endColumn":109},"no-native-reassign",["78"],"no-negated-in-lhs",["79"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'getToken' and 'token'. Either include them or remove the dependency array.","ArrayExpression",["80"],"React Hook React.useEffect has a missing dependency: 'options'. Either include it or remove the dependency array.",["81"],"React Hook React.useEffect has a missing dependency: 'getQuestions'. Either include it or remove the dependency array.",["82"],"default-case","Expected a default case.","SwitchStatement","missingDefaultCase","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","JSXOpeningElement",["78"],["79"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},{"desc":"87","fix":"88"},"Update the dependencies array to be: [getToken, token]",{"range":"89","text":"90"},"Update the dependencies array to be: [options]",{"range":"91","text":"92"},"Update the dependencies array to be: [options.difficulty, options.amount, options.category, options.type, getQuestions]",{"range":"93","text":"94"},[755,757],"[getToken, token]",[1098,1100],"[options]",[1320,1388],"[options.difficulty, options.amount, options.category, options.type, getQuestions]"]