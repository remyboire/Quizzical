{"ast":null,"code":"var _jsxFileName = \"/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport Question from './components/Question';\nimport Start from './components/Start';\nimport Options from './components/Options';\nimport Results from './components/Results';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]);\n  const [selectedAnswers, setSelectedAnswers] = React.useState([]);\n  const [isChecked, setIsChecked] = React.useState(false);\n  const [options, setOptions] = React.useState({\n    visible: true,\n    difficulty: '',\n    category: '',\n    amount: '1',\n    type: ''\n  });\n  const [score, setScore] = React.useState({});\n  const [turn, setTurn] = React.useState(0);\n  const [startScreen, setStartScreen] = React.useState(true);\n\n  function getCategory(category) {\n    switch (category) {\n      case '9':\n        return 'General Knowledge';\n\n      case '10':\n        return 'Entertainment: Books';\n\n      case '11':\n        return 'Entertainment: Film';\n\n      case '12':\n        return 'Entertainment: Music';\n\n      case '13':\n        return 'Entertainment: Musicals & Theatres';\n\n      case '14':\n        return 'Entertainment: Television';\n\n      case '15':\n        return 'Entertainment: Video Games';\n\n      case '16':\n        return 'Entertainment: Board Games';\n\n      case '17':\n        return 'Science & Nature';\n\n      case '18':\n        return 'Science: Computers';\n\n      case '19':\n        return 'Science: Mathematics';\n\n      case '20':\n        return 'Mythology';\n\n      case '21':\n        return 'Sports';\n\n      case '22':\n        return 'Geography';\n\n      case '23':\n        return 'History';\n\n      case '24':\n        return 'Politics';\n\n      case '25':\n        return 'Art';\n\n      case '26':\n        return 'Celebrities';\n\n      case '27':\n        return 'Animals';\n\n      case '28':\n        return 'Vehicles';\n\n      case '29':\n        return 'Entertainment: Comics';\n\n      case '30':\n        return 'Science: Gadgets';\n\n      case '31':\n        return 'Entertainment: Japanese Anime & Manga';\n\n      case '32':\n        return 'Entertainment: Cartoon & Animations';\n    }\n  } // console.log(score)\n  // get data from api and return it\n\n\n  function getQuestions() {\n    // fetch from api\n    fetch('https://opentdb.com/api.php?amount=' + options.amount + '&category=' + options.category + '&difficulty=' + options.difficulty + '&type=' + options.type).then(response => response.json()).then(data => {\n      data.results.forEach(question => {\n        question.incorrect_answers.push(question.correct_answer);\n        question.incorrect_answers = question.incorrect_answers.sort();\n      });\n      setQuestions(data.results);\n    }).catch(error => console.log(error));\n  }\n\n  function handleOptionsChange(event) {\n    setOptions(prevOptions => {\n      return { ...prevOptions,\n        [event.target.name]: event.target.value\n      };\n    });\n  }\n\n  function toggleOptions() {\n    console.log(options);\n    setOptions(prevOptions => {\n      return { ...prevOptions,\n        visible: !prevOptions.visible\n      };\n    });\n  }\n\n  function handleQuestionClick(questionId, answer) {\n    if (!isChecked) {\n      setSelectedAnswers(prevState => {\n        const newState = { ...prevState\n        };\n        newState[questionId] = answer;\n        return newState;\n      });\n    }\n  }\n\n  React.useEffect(() => {\n    getQuestions();\n  }, [options.difficulty, options.amount, options.category, options.type]); // compare answers with correct answer\n\n  function checkAnswers() {\n    setIsChecked(true);\n    const correctAnswers = questions.map(question => question.correct_answer);\n    let count = 0;\n    Object.keys(selectedAnswers).map(key => {\n      if (selectedAnswers[key] === correctAnswers[key]) {\n        return count++;\n      }\n    });\n    setScore(prevState => {\n      const newState = { ...prevState\n      };\n      newState[turn] = {\n        turn: turn,\n        correctsAnswers: count,\n        questions: questions.length\n      };\n      return newState;\n    });\n  }\n\n  function restartGame() {\n    setTurn(prevTurn => prevTurn + 1);\n    setIsChecked(false);\n    setSelectedAnswers([]);\n    getQuestions();\n  } // map questions to question components\n  // console.log(questions)\n  // take all scores from score object and add them in a total score const\n\n\n  const totalScore = Object.values(score).reduce((acc, curr) => {\n    return acc + curr.correctsAnswers;\n  }, 0);\n  const totalQuestions = Object.values(score).reduce((acc, curr) => {\n    return acc + curr.questions;\n  }, 0);\n  const totalTurns = Object.keys(score).length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [startScreen && /*#__PURE__*/_jsxDEV(Start, {\n      toggleOptions: toggleOptions,\n      options: options,\n      getCategory: getCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 20\n    }, this), !startScreen && /*#__PURE__*/_jsxDEV(Options, {\n      options: options,\n      handleOptionsChange: handleOptionsChange,\n      toggleOptions: toggleOptions,\n      getCategory: getCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 21\n    }, this), !startScreen && questions.map(question => /*#__PURE__*/_jsxDEV(Question, {\n      id: questions.indexOf(question),\n      question: question.question,\n      category: question.category,\n      correct_answer: question.correct_answer,\n      incorrect_answers: question.incorrect_answers,\n      answers: question.answers,\n      handleQuestionClick: handleQuestionClick,\n      selectedAnswer: selectedAnswers[questions.indexOf(question)],\n      isChecked: isChecked\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 6\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"check\",\n      onClick: isChecked ? restartGame : checkAnswers,\n      children: isChecked ? 'Restart' : 'Check answers'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(Results, {\n      score: totalScore,\n      totalQuestions: totalQuestions,\n      totalTurns: totalTurns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 4\n    }, this), \"}\"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"IrMJWbs1Il8ml9trpwqhwLNYMOU=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js"],"names":["React","Question","Start","Options","Results","nanoid","App","questions","setQuestions","useState","selectedAnswers","setSelectedAnswers","isChecked","setIsChecked","options","setOptions","visible","difficulty","category","amount","type","score","setScore","turn","setTurn","startScreen","setStartScreen","getCategory","getQuestions","fetch","then","response","json","data","results","forEach","question","incorrect_answers","push","correct_answer","sort","catch","error","console","log","handleOptionsChange","event","prevOptions","target","name","value","toggleOptions","handleQuestionClick","questionId","answer","prevState","newState","useEffect","checkAnswers","correctAnswers","map","count","Object","keys","key","correctsAnswers","length","restartGame","prevTurn","totalScore","values","reduce","acc","curr","totalQuestions","totalTurns","indexOf","answers"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css'\nimport Question from './components/Question'\nimport Start from './components/Start'\nimport Options from './components/Options'\nimport Results from './components/Results'\nimport { nanoid } from 'nanoid'\n\nexport default function App() {\n\tconst [questions, setQuestions] = React.useState([])\n\tconst [selectedAnswers, setSelectedAnswers] = React.useState([])\n\tconst [isChecked, setIsChecked] = React.useState(false)\n\tconst [options, setOptions] = React.useState({\n\t\tvisible: true,\n\t\tdifficulty: '',\n\t\tcategory: '',\n\t\tamount: '1',\n\t\ttype: '',\n\t})\n\tconst [score, setScore] = React.useState({})\n\tconst [turn, setTurn] = React.useState(0)\n\tconst [startScreen, setStartScreen] = React.useState(true)\n\n\tfunction getCategory(category) {\n\t\tswitch (category) {\n\t\t\tcase '9':\n\t\t\t\treturn 'General Knowledge'\n\t\t\tcase '10':\n\t\t\t\treturn 'Entertainment: Books'\n\t\t\tcase '11':\n\t\t\t\treturn 'Entertainment: Film'\n\t\t\tcase '12':\n\t\t\t\treturn 'Entertainment: Music'\n\t\t\tcase '13':\n\t\t\t\treturn 'Entertainment: Musicals & Theatres'\n\t\t\tcase '14':\n\t\t\t\treturn 'Entertainment: Television'\n\t\t\tcase '15':\n\t\t\t\treturn 'Entertainment: Video Games'\n\t\t\tcase '16':\n\t\t\t\treturn 'Entertainment: Board Games'\n\t\t\tcase '17':\n\t\t\t\treturn 'Science & Nature'\n\t\t\tcase '18':\n\t\t\t\treturn 'Science: Computers'\n\t\t\tcase '19':\n\t\t\t\treturn 'Science: Mathematics'\n\t\t\tcase '20':\n\t\t\t\treturn 'Mythology'\n\t\t\tcase '21':\n\t\t\t\treturn 'Sports'\n\t\t\tcase '22':\n\t\t\t\treturn 'Geography'\n\t\t\tcase '23':\n\t\t\t\treturn 'History'\n\t\t\tcase '24':\n\t\t\t\treturn 'Politics'\n\t\t\tcase '25':\n\t\t\t\treturn 'Art'\n\t\t\tcase '26':\n\t\t\t\treturn 'Celebrities'\n\t\t\tcase '27':\n\t\t\t\treturn 'Animals'\n\t\t\tcase '28':\n\t\t\t\treturn 'Vehicles'\n\t\t\tcase '29':\n\t\t\t\treturn 'Entertainment: Comics'\n\t\t\tcase '30':\n\t\t\t\treturn 'Science: Gadgets'\n\t\t\tcase '31':\n\t\t\t\treturn 'Entertainment: Japanese Anime & Manga'\n\t\t\tcase '32':\n\t\t\t\treturn 'Entertainment: Cartoon & Animations'\n\t\t}\n\t}\n\t// console.log(score)\n\t// get data from api and return it\n\tfunction getQuestions() {\n\t\t// fetch from api\n\t\tfetch(\n\t\t\t'https://opentdb.com/api.php?amount=' + options.amount + '&category=' + options.category + '&difficulty=' + options.difficulty + '&type=' + options.type\n\t\t)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tdata.results.forEach((question) => {\n\t\t\t\t\tquestion.incorrect_answers.push(question.correct_answer)\n\t\t\t\t\tquestion.incorrect_answers = question.incorrect_answers.sort()\n\t\t\t\t})\n\t\t\t\tsetQuestions(data.results)\n\t\t\t})\n\t\t\t.catch((error) => console.log(error))\n\t}\n\tfunction handleOptionsChange(event) {\n\t\tsetOptions((prevOptions) => {\n\t\t\treturn {\n\t\t\t\t...prevOptions,\n\t\t\t\t[event.target.name]: event.target.value,\n\t\t\t}\n\t\t})\n\t}\n\tfunction toggleOptions() {\n\t\tconsole.log(options)\n\t\tsetOptions((prevOptions) => {\n\t\t\treturn {\n\t\t\t\t...prevOptions,\n\t\t\t\tvisible: !prevOptions.visible,\n\t\t\t}\n\t\t})\n\t}\n\tfunction handleQuestionClick(questionId, answer) {\n\t\tif (!isChecked) {\n\t\t\tsetSelectedAnswers((prevState) => {\n\t\t\t\tconst newState = { ...prevState }\n\t\t\t\tnewState[questionId] = answer\n\t\t\t\treturn newState\n\t\t\t})\n\t\t}\n\t}\n\n\tReact.useEffect(() => {\n\t\tgetQuestions()\n\t}, [options.difficulty, options.amount, options.category, options.type])\n\n\t// compare answers with correct answer\n\tfunction checkAnswers() {\n\t\tsetIsChecked(true)\n\t\tconst correctAnswers = questions.map((question) => question.correct_answer)\n\t\tlet count = 0\n\t\tObject.keys(selectedAnswers).map((key) => {\n\t\t\tif (selectedAnswers[key] === correctAnswers[key]) {\n\t\t\t\treturn count++\n\t\t\t}\n\t\t})\n\t\tsetScore((prevState) => {\n\t\t\tconst newState = { ...prevState }\n\t\t\tnewState[turn] = {\n\t\t\t\tturn: turn,\n\t\t\t\tcorrectsAnswers: count,\n\t\t\t\tquestions: questions.length,\n\t\t\t}\n\t\t\treturn newState\n\t\t})\n\t}\n\n\tfunction restartGame() {\n\t\tsetTurn((prevTurn) => prevTurn + 1)\n\t\tsetIsChecked(false)\n\t\tsetSelectedAnswers([])\n\t\tgetQuestions()\n\t}\n\n\t// map questions to question components\n\t// console.log(questions)\n\n\t// take all scores from score object and add them in a total score const\n\tconst totalScore = Object.values(score).reduce((acc, curr) => {\n\t\treturn acc + curr.correctsAnswers\n\t}, 0)\n\tconst totalQuestions = Object.values(score).reduce((acc, curr) => {\n\t\treturn acc + curr.questions\n\t}, 0)\n\tconst totalTurns = Object.keys(score).length\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t{startScreen && <Start toggleOptions={toggleOptions} options={options} getCategory={getCategory} />}\n\t\t\t{!startScreen && <Options options={options} handleOptionsChange={handleOptionsChange} toggleOptions={toggleOptions} getCategory={getCategory} />}\n\t\t\t{!startScreen &&\n\t\t\t\tquestions.map((question) => (\n\t\t\t\t\t<Question\n\t\t\t\t\t\tkey={nanoid()}\n\t\t\t\t\t\tid={questions.indexOf(question)}\n\t\t\t\t\t\tquestion={question.question}\n\t\t\t\t\t\tcategory={question.category}\n\t\t\t\t\t\tcorrect_answer={question.correct_answer}\n\t\t\t\t\t\tincorrect_answers={question.incorrect_answers}\n\t\t\t\t\t\tanswers={question.answers}\n\t\t\t\t\t\thandleQuestionClick={handleQuestionClick}\n\t\t\t\t\t\tselectedAnswer={selectedAnswers[questions.indexOf(question)]}\n\t\t\t\t\t\tisChecked={isChecked}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t{<button className='check' onClick={isChecked ? restartGame : checkAnswers}>\n\t\t\t\t{isChecked ? 'Restart' : 'Check answers'}\n\t\t\t</button>}\n\t\t\t<Results score={totalScore} totalQuestions={totalQuestions} totalTurns={totalTurns} />}\n\t\t</div>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}