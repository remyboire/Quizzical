{"ast":null,"code":"import React from 'react';\nimport './question.css';\nimport { nanoid } from 'nanoid';\nimport he from 'he'; // Change h1 and div for fieldset, inputs and legend\n// export default function Question(props) {\n// \tconst sortedAnswers = props.incorrect_answers.map((answer) => (\n// \t\t<button\n// \t\t\tclassName={`answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${\n// \t\t\t\tanswer !== props.correct_answer && props.isChecked ? 'incorrect' : ''\n// \t\t\t}`}\n// \t\t\tkey={nanoid()}\n// \t\t\tonClick={() => props.handleQuestionClick(props.id, answer)}\n// \t\t>\n// \t\t\t{he.decode(answer)}\n// \t\t</button>\n// \t))\n// \treturn (\n// \t\t<div className={`question--wrapper ${props.className}`}>\n// \t\t\t<h1 className='question'>{he.decode(props.question)}</h1>\n// \t\t\t<h2 className='category'>{he.decode(props.category)}</h2>\n// \t\t\t<div className='answers'>\n// \t\t\t\t<div className='answers'>{sortedAnswers}</div>\n// \t\t\t</div>\n// \t\t</div>\n// \t)\n// }","map":{"version":3,"sources":["/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js"],"names":["React","nanoid","he"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,EAAP,MAAe,IAAf,C,CAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React from 'react'\nimport './question.css'\nimport { nanoid } from 'nanoid'\nimport he from 'he'\n\n\n// Change h1 and div for fieldset, inputs and legend\n\n// export default function Question(props) {\n// \tconst sortedAnswers = props.incorrect_answers.map((answer) => (\n// \t\t<button\n// \t\t\tclassName={`answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${\n// \t\t\t\tanswer !== props.correct_answer && props.isChecked ? 'incorrect' : ''\n// \t\t\t}`}\n// \t\t\tkey={nanoid()}\n// \t\t\tonClick={() => props.handleQuestionClick(props.id, answer)}\n// \t\t>\n// \t\t\t{he.decode(answer)}\n// \t\t</button>\n// \t))\n\n// \treturn (\n// \t\t<div className={`question--wrapper ${props.className}`}>\n// \t\t\t<h1 className='question'>{he.decode(props.question)}</h1>\n// \t\t\t<h2 className='category'>{he.decode(props.category)}</h2>\n// \t\t\t<div className='answers'>\n// \t\t\t\t<div className='answers'>{sortedAnswers}</div>\n// \t\t\t</div>\n// \t\t</div>\n// \t)\n// }\n"]},"metadata":{},"sourceType":"module"}