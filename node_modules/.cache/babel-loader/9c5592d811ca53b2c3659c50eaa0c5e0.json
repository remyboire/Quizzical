{"ast":null,"code":"var _jsxFileName = \"/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport Question from './components/Question';\nimport Start from './components/Start';\nimport Options from './components/Options';\nimport Results from './components/Results';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  // Get a unique token in order to do not have repeted questions\n  const [token, setToken] = React.useState(localStorage.getItem('token'));\n\n  async function getToken() {\n    fetch('https://opentdb.com/api_token.php?command=request').then(response => response.json()).then(data => {\n      setToken(data.token);\n      return localStorage.setItem('token', token);\n    }).catch(error => console.log(error));\n  }\n\n  React.useEffect(() => {\n    if (!token) {\n      getToken();\n    }\n  }, []);\n  console.log(token); // Get stored options from local storage or set default values\n\n  const [options, setOptions] = React.useState(JSON.parse(localStorage.getItem('options')));\n  React.useEffect(() => {\n    if (!options) {\n      setOptions({\n        visible: false,\n        difficulty: '',\n        category: '',\n        amount: '5',\n        type: ''\n      });\n    }\n  }, []);\n  React.useEffect(() => {\n    localStorage.setItem('options', JSON.stringify(options));\n  }, [options]); // Get questions\n\n  const [questions, setQuestions] = React.useState([]);\n  React.useEffect(() => {\n    getQuestions();\n  }, [options.difficulty, options.amount, options.category, options.type]);\n  const [selectedAnswers, setSelectedAnswers] = React.useState([]);\n  const [isChecked, setIsChecked] = React.useState(false);\n  const [score, setScore] = React.useState({});\n  const [turn, setTurn] = React.useState(0);\n  const [startScreen, setStartScreen] = React.useState(true);\n  const categories = [{\n    name: 'all',\n    id: 'all'\n  }, {\n    name: 'General Knowledge',\n    id: 9\n  }, {\n    name: 'Entertainment: Books',\n    id: 10\n  }, {\n    name: 'Entertainment: Film',\n    id: 11\n  }, {\n    name: 'Entertainment: Music',\n    id: 12\n  }, {\n    name: 'Entertainment: Musicals & Theatres',\n    id: 13\n  }, {\n    name: 'Entertainment: Television',\n    id: 14\n  }, {\n    name: 'Entertainment: Video Games',\n    id: 15\n  }, {\n    name: 'Entertainment: Board Games',\n    id: 16\n  }, {\n    name: 'Science & Nature',\n    id: 17\n  }, {\n    name: 'Science: Computers',\n    id: 18\n  }, {\n    name: 'Science: Mathematics',\n    id: 19\n  }, {\n    name: 'Mythology',\n    id: 20\n  }, {\n    name: 'Sports',\n    id: 21\n  }, {\n    name: 'Geography',\n    id: 22\n  }, {\n    name: 'History',\n    id: 23\n  }, {\n    name: 'Politics',\n    id: 24\n  }, {\n    name: 'Art',\n    id: 25\n  }, {\n    name: 'Celebrities',\n    id: 26\n  }, {\n    name: 'Animals',\n    id: 27\n  }, {\n    name: 'Vehicles',\n    id: 28\n  }, {\n    name: 'Entertainment: Comics',\n    id: 29\n  }, {\n    name: 'Science: Gadgets',\n    id: 30\n  }, {\n    name: 'Entertainment: Japanese Anime & Manga',\n    id: 31\n  }, {\n    name: 'Entertainment: Cartoon & Animations',\n    id: 32\n  }];\n\n  function getCategory(category) {\n    switch (category) {\n      case '9':\n        return 'General Knowledge';\n\n      case '10':\n        return 'Entertainment: Books';\n\n      case '11':\n        return 'Entertainment: Film';\n\n      case '12':\n        return 'Entertainment: Music';\n\n      case '13':\n        return 'Entertainment: Musicals & Theatres';\n\n      case '14':\n        return 'Entertainment: Television';\n\n      case '15':\n        return 'Entertainment: Video Games';\n\n      case '16':\n        return 'Entertainment: Board Games';\n\n      case '17':\n        return 'Science & Nature';\n\n      case '18':\n        return 'Science: Computers';\n\n      case '19':\n        return 'Science: Mathematics';\n\n      case '20':\n        return 'Mythology';\n\n      case '21':\n        return 'Sports';\n\n      case '22':\n        return 'Geography';\n\n      case '23':\n        return 'History';\n\n      case '24':\n        return 'Politics';\n\n      case '25':\n        return 'Art';\n\n      case '26':\n        return 'Celebrities';\n\n      case '27':\n        return 'Animals';\n\n      case '28':\n        return 'Vehicles';\n\n      case '29':\n        return 'Entertainment: Comics';\n\n      case '30':\n        return 'Science: Gadgets';\n\n      case '31':\n        return 'Entertainment: Japanese Anime & Manga';\n\n      case '32':\n        return 'Entertainment: Cartoon & Animations';\n    }\n  } // console.log(score)\n  // get data from api and return it\n\n\n  function getQuestions() {\n    // fetch from api\n    const amount = options.amount;\n    const difficulty = options.difficulty;\n    const type = options.type;\n    const category = options.category === 'all' ? '' : options.category;\n    const url = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=${type}&category=${category}&token=${token}`;\n    console.log('fetch from', url);\n    fetch(url).then(response => response.json()).then(data => {\n      var _ref, _ref2;\n\n      (_ref = data.response_code === 3) !== null && _ref !== void 0 ? _ref : getToken();\n      (_ref2 = data.response_code === 4) !== null && _ref2 !== void 0 ? _ref2 : getToken();\n      data.results.forEach(question => {\n        question.incorrect_answers.push(question.correct_answer);\n        question.incorrect_answers = question.incorrect_answers.sort();\n      });\n      setQuestions(data.results);\n    }).catch(error => console.log(error));\n  }\n\n  function handleOptionsChange(event) {\n    setOptions(prevOptions => {\n      return { ...prevOptions,\n        [event.target.name]: event.target.value\n      };\n    });\n  }\n\n  function toggleOptions() {\n    setOptions(prevOptions => {\n      return { ...prevOptions,\n        visible: !prevOptions.visible\n      };\n    });\n  }\n\n  function toggleStartScreen() {\n    setStartScreen(prevStartScreen => {\n      return !prevStartScreen;\n    });\n  }\n\n  function handleQuestionClick(questionId, answer) {\n    if (!isChecked) {\n      setSelectedAnswers(prevState => {\n        const newState = { ...prevState\n        };\n        newState[questionId] = answer;\n        return newState;\n      });\n    }\n  } // compare answers with correct answer\n\n\n  function checkAnswers() {\n    setIsChecked(true);\n    const correctAnswers = questions.map(question => question.correct_answer);\n    let count = 0;\n    Object.keys(selectedAnswers).map(key => {\n      if (selectedAnswers[key] === correctAnswers[key]) {\n        return count++;\n      }\n    });\n    setScore(prevState => {\n      const newState = { ...prevState\n      };\n      newState[turn] = {\n        turn: turn,\n        correctsAnswers: count,\n        questions: questions.length\n      };\n      return newState;\n    });\n  }\n\n  function restartGame() {\n    setTurn(prevTurn => prevTurn + 1);\n    setIsChecked(false);\n    setSelectedAnswers([]);\n    getQuestions();\n  } // map questions to question components\n  // console.log(questions)\n  // take all scores from score object and add them in a total score const\n\n\n  const totalScore = Object.values(score).reduce((acc, curr) => {\n    return acc + curr.correctsAnswers;\n  }, 0);\n  const totalQuestions = Object.values(score).reduce((acc, curr) => {\n    return acc + curr.questions;\n  }, 0);\n  const totalTurns = Object.keys(score).length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [startScreen && /*#__PURE__*/_jsxDEV(Start, {\n      options: options,\n      toggleOptions: toggleOptions,\n      toggleStartScreen: toggleStartScreen,\n      getCategory: getCategory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 238,\n      columnNumber: 20\n    }, this), options.visible && /*#__PURE__*/_jsxDEV(Options, {\n      options: options,\n      toggleOptions: toggleOptions,\n      handleOptionsChange: handleOptionsChange,\n      getCategory: getCategory,\n      categories: categories\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 240,\n      columnNumber: 5\n    }, this), !startScreen && questions.map(question => /*#__PURE__*/_jsxDEV(Question, {\n      className: options.visible ? 'hidden' : '',\n      id: questions.indexOf(question),\n      question: question.question,\n      category: question.category,\n      correct_answer: question.correct_answer,\n      incorrect_answers: question.incorrect_answers,\n      answers: question.answers,\n      handleQuestionClick: handleQuestionClick,\n      selectedAnswer: selectedAnswers[questions.indexOf(question)],\n      isChecked: isChecked\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 6\n    }, this)), !startScreen && Object.getOwnPropertyNames(selectedAnswers).length === questions.length && /*#__PURE__*/_jsxDEV(\"button\", {\n      className: options.visible ? 'check hidden' : 'check',\n      onClick: isChecked ? restartGame : checkAnswers,\n      children: isChecked ? 'Restart' : 'Check answers'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 5\n    }, this), !startScreen && /*#__PURE__*/_jsxDEV(Results, {\n      options: options,\n      toggleOptions: toggleOptions,\n      getCategory: getCategory,\n      score: totalScore,\n      totalQuestions: totalQuestions,\n      totalTurns: totalTurns\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 269,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 237,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"qCHcbBT+VESFQyvet0W8LG9tx6g=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js"],"names":["React","Question","Start","Options","Results","nanoid","App","token","setToken","useState","localStorage","getItem","getToken","fetch","then","response","json","data","setItem","catch","error","console","log","useEffect","options","setOptions","JSON","parse","visible","difficulty","category","amount","type","stringify","questions","setQuestions","getQuestions","selectedAnswers","setSelectedAnswers","isChecked","setIsChecked","score","setScore","turn","setTurn","startScreen","setStartScreen","categories","name","id","getCategory","url","response_code","results","forEach","question","incorrect_answers","push","correct_answer","sort","handleOptionsChange","event","prevOptions","target","value","toggleOptions","toggleStartScreen","prevStartScreen","handleQuestionClick","questionId","answer","prevState","newState","checkAnswers","correctAnswers","map","count","Object","keys","key","correctsAnswers","length","restartGame","prevTurn","totalScore","values","reduce","acc","curr","totalQuestions","totalTurns","indexOf","answers","getOwnPropertyNames"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css'\nimport Question from './components/Question'\nimport Start from './components/Start'\nimport Options from './components/Options'\nimport Results from './components/Results'\nimport { nanoid } from 'nanoid'\n\nexport default function App() {\n\t// Get a unique token in order to do not have repeted questions\n\tconst [token, setToken] = React.useState(localStorage.getItem('token'))\n\tasync function getToken() {\n\t\tfetch('https://opentdb.com/api_token.php?command=request')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tsetToken(data.token)\n\t\t\t\treturn localStorage.setItem('token', token)\n\t\t\t})\n\t\t\t.catch((error) => console.log(error))\n\t}\n\tReact.useEffect(() => {\n\t\tif (!token) {\n\t\t\tgetToken()\n\t\t}\n\t}, [])\n\tconsole.log(token)\n\n\t// Get stored options from local storage or set default values\n\tconst [options, setOptions] = React.useState(JSON.parse(localStorage.getItem('options')))\n\n\tReact.useEffect(() => {\n\t\tif (!options) {\n\t\t\tsetOptions({\n\t\t\t\tvisible: false,\n\t\t\t\tdifficulty: '',\n\t\t\t\tcategory: '',\n\t\t\t\tamount: '5',\n\t\t\t\ttype: '',\n\t\t\t})\n\t\t}\n\t}, [])\n\tReact.useEffect(() => {\n\t\tlocalStorage.setItem('options', JSON.stringify(options))\n\t}, [options])\n\n\t// Get questions\n\tconst [questions, setQuestions] = React.useState([])\n\tReact.useEffect(() => {\n\t\tgetQuestions()\n\t}, [options.difficulty, options.amount, options.category, options.type])\n\n\tconst [selectedAnswers, setSelectedAnswers] = React.useState([])\n\tconst [isChecked, setIsChecked] = React.useState(false)\n\tconst [score, setScore] = React.useState({})\n\tconst [turn, setTurn] = React.useState(0)\n\tconst [startScreen, setStartScreen] = React.useState(true)\n\n\tconst categories = [\n\t\t{ name: 'all', id: 'all' },\n\t\t{ name: 'General Knowledge', id: 9 },\n\t\t{ name: 'Entertainment: Books', id: 10 },\n\t\t{ name: 'Entertainment: Film', id: 11 },\n\t\t{ name: 'Entertainment: Music', id: 12 },\n\t\t{ name: 'Entertainment: Musicals & Theatres', id: 13 },\n\t\t{ name: 'Entertainment: Television', id: 14 },\n\t\t{ name: 'Entertainment: Video Games', id: 15 },\n\t\t{ name: 'Entertainment: Board Games', id: 16 },\n\t\t{ name: 'Science & Nature', id: 17 },\n\t\t{ name: 'Science: Computers', id: 18 },\n\t\t{ name: 'Science: Mathematics', id: 19 },\n\t\t{ name: 'Mythology', id: 20 },\n\t\t{ name: 'Sports', id: 21 },\n\t\t{ name: 'Geography', id: 22 },\n\t\t{ name: 'History', id: 23 },\n\t\t{ name: 'Politics', id: 24 },\n\t\t{ name: 'Art', id: 25 },\n\t\t{ name: 'Celebrities', id: 26 },\n\t\t{ name: 'Animals', id: 27 },\n\t\t{ name: 'Vehicles', id: 28 },\n\t\t{ name: 'Entertainment: Comics', id: 29 },\n\t\t{ name: 'Science: Gadgets', id: 30 },\n\t\t{ name: 'Entertainment: Japanese Anime & Manga', id: 31 },\n\t\t{ name: 'Entertainment: Cartoon & Animations', id: 32 },\n\t]\n\n\tfunction getCategory(category) {\n\t\tswitch (category) {\n\t\t\tcase '9':\n\t\t\t\treturn 'General Knowledge'\n\t\t\tcase '10':\n\t\t\t\treturn 'Entertainment: Books'\n\t\t\tcase '11':\n\t\t\t\treturn 'Entertainment: Film'\n\t\t\tcase '12':\n\t\t\t\treturn 'Entertainment: Music'\n\t\t\tcase '13':\n\t\t\t\treturn 'Entertainment: Musicals & Theatres'\n\t\t\tcase '14':\n\t\t\t\treturn 'Entertainment: Television'\n\t\t\tcase '15':\n\t\t\t\treturn 'Entertainment: Video Games'\n\t\t\tcase '16':\n\t\t\t\treturn 'Entertainment: Board Games'\n\t\t\tcase '17':\n\t\t\t\treturn 'Science & Nature'\n\t\t\tcase '18':\n\t\t\t\treturn 'Science: Computers'\n\t\t\tcase '19':\n\t\t\t\treturn 'Science: Mathematics'\n\t\t\tcase '20':\n\t\t\t\treturn 'Mythology'\n\t\t\tcase '21':\n\t\t\t\treturn 'Sports'\n\t\t\tcase '22':\n\t\t\t\treturn 'Geography'\n\t\t\tcase '23':\n\t\t\t\treturn 'History'\n\t\t\tcase '24':\n\t\t\t\treturn 'Politics'\n\t\t\tcase '25':\n\t\t\t\treturn 'Art'\n\t\t\tcase '26':\n\t\t\t\treturn 'Celebrities'\n\t\t\tcase '27':\n\t\t\t\treturn 'Animals'\n\t\t\tcase '28':\n\t\t\t\treturn 'Vehicles'\n\t\t\tcase '29':\n\t\t\t\treturn 'Entertainment: Comics'\n\t\t\tcase '30':\n\t\t\t\treturn 'Science: Gadgets'\n\t\t\tcase '31':\n\t\t\t\treturn 'Entertainment: Japanese Anime & Manga'\n\t\t\tcase '32':\n\t\t\t\treturn 'Entertainment: Cartoon & Animations'\n\t\t}\n\t}\n\t// console.log(score)\n\t// get data from api and return it\n\tfunction getQuestions() {\n\t\t// fetch from api\n\t\tconst amount = options.amount\n\t\tconst difficulty = options.difficulty\n\t\tconst type = options.type\n\t\tconst category = options.category === 'all' ? '' : options.category\n\t\tconst url = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=${type}&category=${category}&token=${token}`\n\t\tconsole.log('fetch from', url)\n\n\t\tfetch(url)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tdata.response_code === 3 ?? getToken()\n\t\t\t\tdata.response_code === 4 ?? getToken()\n\t\t\t\tdata.results.forEach((question) => {\n\t\t\t\t\tquestion.incorrect_answers.push(question.correct_answer)\n\t\t\t\t\tquestion.incorrect_answers = question.incorrect_answers.sort()\n\t\t\t\t})\n\t\t\t\tsetQuestions(data.results)\n\t\t\t})\n\t\t\t.catch((error) => console.log(error))\n\t}\n\n\tfunction handleOptionsChange(event) {\n\t\tsetOptions((prevOptions) => {\n\t\t\treturn {\n\t\t\t\t...prevOptions,\n\t\t\t\t[event.target.name]: event.target.value,\n\t\t\t}\n\t\t})\n\t}\n\tfunction toggleOptions() {\n\t\tsetOptions((prevOptions) => {\n\t\t\treturn {\n\t\t\t\t...prevOptions,\n\t\t\t\tvisible: !prevOptions.visible,\n\t\t\t}\n\t\t})\n\t}\n\n\tfunction toggleStartScreen() {\n\t\tsetStartScreen((prevStartScreen) => {\n\t\t\treturn !prevStartScreen\n\t\t})\n\t}\n\n\tfunction handleQuestionClick(questionId, answer) {\n\t\tif (!isChecked) {\n\t\t\tsetSelectedAnswers((prevState) => {\n\t\t\t\tconst newState = { ...prevState }\n\t\t\t\tnewState[questionId] = answer\n\t\t\t\treturn newState\n\t\t\t})\n\t\t}\n\t}\n\n\t// compare answers with correct answer\n\tfunction checkAnswers() {\n\t\tsetIsChecked(true)\n\t\tconst correctAnswers = questions.map((question) => question.correct_answer)\n\t\tlet count = 0\n\t\tObject.keys(selectedAnswers).map((key) => {\n\t\t\tif (selectedAnswers[key] === correctAnswers[key]) {\n\t\t\t\treturn count++\n\t\t\t}\n\t\t})\n\t\tsetScore((prevState) => {\n\t\t\tconst newState = { ...prevState }\n\t\t\tnewState[turn] = {\n\t\t\t\tturn: turn,\n\t\t\t\tcorrectsAnswers: count,\n\t\t\t\tquestions: questions.length,\n\t\t\t}\n\t\t\treturn newState\n\t\t})\n\t}\n\n\tfunction restartGame() {\n\t\tsetTurn((prevTurn) => prevTurn + 1)\n\t\tsetIsChecked(false)\n\t\tsetSelectedAnswers([])\n\t\tgetQuestions()\n\t}\n\n\t// map questions to question components\n\t// console.log(questions)\n\n\t// take all scores from score object and add them in a total score const\n\tconst totalScore = Object.values(score).reduce((acc, curr) => {\n\t\treturn acc + curr.correctsAnswers\n\t}, 0)\n\tconst totalQuestions = Object.values(score).reduce((acc, curr) => {\n\t\treturn acc + curr.questions\n\t}, 0)\n\tconst totalTurns = Object.keys(score).length\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t{startScreen && <Start options={options} toggleOptions={toggleOptions} toggleStartScreen={toggleStartScreen} getCategory={getCategory} />}\n\t\t\t{options.visible && (\n\t\t\t\t<Options options={options} toggleOptions={toggleOptions} handleOptionsChange={handleOptionsChange} getCategory={getCategory} categories={categories} />\n\t\t\t)}\n\t\t\t{!startScreen &&\n\t\t\t\tquestions.map((question) => (\n\t\t\t\t\t<Question\n\t\t\t\t\t\tclassName={options.visible ? 'hidden' : ''}\n\t\t\t\t\t\tkey={nanoid()}\n\t\t\t\t\t\tid={questions.indexOf(question)}\n\t\t\t\t\t\tquestion={question.question}\n\t\t\t\t\t\tcategory={question.category}\n\t\t\t\t\t\tcorrect_answer={question.correct_answer}\n\t\t\t\t\t\tincorrect_answers={question.incorrect_answers}\n\t\t\t\t\t\tanswers={question.answers}\n\t\t\t\t\t\thandleQuestionClick={handleQuestionClick}\n\t\t\t\t\t\tselectedAnswer={selectedAnswers[questions.indexOf(question)]}\n\t\t\t\t\t\tisChecked={isChecked}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\n\t\t\t{!startScreen && Object.getOwnPropertyNames(selectedAnswers).length === questions.length && (\n\t\t\t\t<button className={options.visible ? 'check hidden' : 'check'} onClick={isChecked ? restartGame : checkAnswers}>\n\t\t\t\t\t{isChecked ? 'Restart' : 'Check answers'}\n\t\t\t\t</button>\n\t\t\t)}\n\t\t\t{/* \n\t\t\t\t<button className={options.visible ? 'check hidden' : 'check'} onClick={isChecked ? restartGame : checkAnswers}>\n\t\t\t\t\t{isChecked ? 'Restart' : 'Check answers'}\n\t\t\t\t</button> */}\n\t\t\t{!startScreen && (\n\t\t\t\t<Results\n\t\t\t\t\toptions={options}\n\t\t\t\t\ttoggleOptions={toggleOptions}\n\t\t\t\t\tgetCategory={getCategory}\n\t\t\t\t\tscore={totalScore}\n\t\t\t\t\ttotalQuestions={totalQuestions}\n\t\t\t\t\ttotalTurns={totalTurns}\n\t\t\t\t/>\n\t\t\t)}\n\t\t</div>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}