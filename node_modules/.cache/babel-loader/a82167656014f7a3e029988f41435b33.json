{"ast":null,"code":"var _jsxFileName = \"/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport Question from './components/Question';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]);\n  const [selectedAnswers, setSelectedAnswers] = React.useState([]); // get data from api and return it\n\n  function getQuestions() {\n    fetch('https://opentdb.com/api.php?amount=5').then(res => res.json()).then(data => setQuestions(data.results)).catch(err => console.log(err));\n  }\n\n  function handleQuestionClick(questionId, question, answer) {\n    setSelectedAnswers(prevState => {\n      const newState = { ...prevState\n      };\n      newState[questionId] = answer;\n      return newState;\n    });\n  }\n\n  React.useEffect(() => {\n    getQuestions();\n  }, []);\n  React.useEffect(() => {\n    const answers = shuffledAnswers.map(answer => /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"answer\",\n      onClick: () => props.handleQuestionClick(props.id, props.question, answer),\n      children: answer\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, this));\n  }, []); // map questions to question components\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: questions.map(question => /*#__PURE__*/_jsxDEV(Question, {\n      id: questions.indexOf(question),\n      question: question.question,\n      category: question.category,\n      correct_answer: question.correct_answer,\n      incorrect_answers: question.incorrect_answers,\n      handleQuestionClick: handleQuestionClick,\n      selectedAnswers: selectedAnswers\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"WdX9PBvOj3q4R4v0ipKq6BdO8kg=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js"],"names":["React","Question","nanoid","App","questions","setQuestions","useState","selectedAnswers","setSelectedAnswers","getQuestions","fetch","then","res","json","data","results","catch","err","console","log","handleQuestionClick","questionId","question","answer","prevState","newState","useEffect","answers","shuffledAnswers","map","props","id","indexOf","category","correct_answer","incorrect_answers"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC7B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,KAAK,CAACM,QAAN,CAAe,EAAf,CAAlC;AACA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCR,KAAK,CAACM,QAAN,CAAe,EAAf,CAA9C,CAF6B,CAI7B;;AACA,WAASG,YAAT,GAAwB;AACvBC,IAAAA,KAAK,CAAC,sCAAD,CAAL,CACEC,IADF,CACQC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADhB,EAEEF,IAFF,CAEQG,IAAD,IAAUT,YAAY,CAACS,IAAI,CAACC,OAAN,CAF7B,EAGEC,KAHF,CAGSC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHjB;AAIA;;AAED,WAASG,mBAAT,CAA6BC,UAA7B,EAAyCC,QAAzC,EAAmDC,MAAnD,EAA2D;AAC1Df,IAAAA,kBAAkB,CAAEgB,SAAD,IAAe;AACjC,YAAMC,QAAQ,GAAG,EAAE,GAAGD;AAAL,OAAjB;AACAC,MAAAA,QAAQ,CAACJ,UAAD,CAAR,GAAuBE,MAAvB;AACA,aAAOE,QAAP;AACA,KAJiB,CAAlB;AAKA;;AAEDzB,EAAAA,KAAK,CAAC0B,SAAN,CAAgB,MAAM;AACrBjB,IAAAA,YAAY;AACZ,GAFD,EAEG,EAFH;AAIAT,EAAAA,KAAK,CAAC0B,SAAN,CAAgB,MAAM;AACrB,UAAMC,OAAO,GAAGC,eAAe,CAACC,GAAhB,CAAqBN,MAAD,iBACnC;AAAQ,MAAA,SAAS,EAAC,QAAlB;AAA0C,MAAA,OAAO,EAAE,MAAMO,KAAK,CAACV,mBAAN,CAA0BU,KAAK,CAACC,EAAhC,EAAoCD,KAAK,CAACR,QAA1C,EAAoDC,MAApD,CAAzD;AAAA,gBACEA;AADF,OAAgCrB,MAAM,EAAtC;AAAA;AAAA;AAAA;AAAA,YADe,CAAhB;AAKA,GAND,EAMG,EANH,EAxB6B,CAgC7B;;AAEA,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cACEE,SAAS,CAACyB,GAAV,CAAeP,QAAD,iBACd,QAAC,QAAD;AAEC,MAAA,EAAE,EAAElB,SAAS,CAAC4B,OAAV,CAAkBV,QAAlB,CAFL;AAGC,MAAA,QAAQ,EAAEA,QAAQ,CAACA,QAHpB;AAIC,MAAA,QAAQ,EAAEA,QAAQ,CAACW,QAJpB;AAKC,MAAA,cAAc,EAAEX,QAAQ,CAACY,cAL1B;AAMC,MAAA,iBAAiB,EAAEZ,QAAQ,CAACa,iBAN7B;AAOC,MAAA,mBAAmB,EAAEf,mBAPtB;AAQC,MAAA,eAAe,EAAEb;AARlB,OACML,MAAM,EADZ;AAAA;AAAA;AAAA;AAAA,YADA;AADF;AAAA;AAAA;AAAA;AAAA,UADD;AAgBA;;GAlDuBC,G;;KAAAA,G","sourcesContent":["import React from 'react'\nimport './App.css'\nimport Question from './components/Question'\nimport { nanoid } from 'nanoid'\n\nexport default function App() {\n\tconst [questions, setQuestions] = React.useState([])\n\tconst [selectedAnswers, setSelectedAnswers] = React.useState([])\n\n\t// get data from api and return it\n\tfunction getQuestions() {\n\t\tfetch('https://opentdb.com/api.php?amount=5')\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => setQuestions(data.results))\n\t\t\t.catch((err) => console.log(err))\n\t}\n\n\tfunction handleQuestionClick(questionId, question, answer) {\n\t\tsetSelectedAnswers((prevState) => {\n\t\t\tconst newState = { ...prevState }\n\t\t\tnewState[questionId] = answer\n\t\t\treturn newState\n\t\t})\n\t}\n\n\tReact.useEffect(() => {\n\t\tgetQuestions()\n\t}, [])\n\n\tReact.useEffect(() => {\n\t\tconst answers = shuffledAnswers.map((answer) => (\n\t\t\t<button className='answer' key={nanoid()} onClick={() => props.handleQuestionClick(props.id, props.question, answer)}>\n\t\t\t\t{answer}\n\t\t\t</button>\n\t\t))\n\t}, [])\n\n\t// map questions to question components\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t{questions.map((question) => (\n\t\t\t\t<Question\n\t\t\t\t\tkey={nanoid()}\n\t\t\t\t\tid={questions.indexOf(question)}\n\t\t\t\t\tquestion={question.question}\n\t\t\t\t\tcategory={question.category}\n\t\t\t\t\tcorrect_answer={question.correct_answer}\n\t\t\t\t\tincorrect_answers={question.incorrect_answers}\n\t\t\t\t\thandleQuestionClick={handleQuestionClick}\n\t\t\t\t\tselectedAnswers={selectedAnswers}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}