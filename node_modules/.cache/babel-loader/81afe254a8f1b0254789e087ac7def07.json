{"ast":null,"code":"var _jsxFileName = \"/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './question.css';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Question(props) {\n  _s();\n\n  // const [shuffledAnswers, setShuffledAnswers] = React.useState([])\n  // // all answers equal props.incorrect_answers + props.correct_answer\n  // function shuffle(array) {\n  // \tlet currentIndex = array.length,\n  // \t\ttemporaryValue,\n  // \t\trandomIndex\n  // \twhile (0 !== currentIndex) {\n  // \t\trandomIndex = Math.floor(Math.random() * currentIndex)\n  // \t\tcurrentIndex -= 1\n  // \t\ttemporaryValue = array[currentIndex]\n  // \t\tarray[currentIndex] = array[randomIndex]\n  // \t\tarray[randomIndex] = temporaryValue\n  // \t}\n  // \treturn array\n  // }\n  // // React.useEffect(() => {\n  // // \tconst shuffledAnswers = answers.sort(() => Math.random() - 0.5)\n  // // \tsetShuffledAnswers(shuffle(shuffledAnswers))\n  // // }, [props.result])\n  // const [randomArray, setRandomArray] = React.useState([])\n  // const answers = props.incorrect_answers.concat(props.correct_answer)\n  // console.log(props)\n  // React.useEffect(\n  // \tfunction () {\n  // \t\tsetRandomArray(shuffle(answers))\n  // \t},\n  // \t[props.correct_answer]\n  // )\n  // React.useEffect(() => {\n  // \tconsole.log('shuffling answers')\n  // \tsetShuffledAnswers(shuffle(allAnswers))\n  // }, [])\n  // let sortedAnswers = shuffledAnswers.map((answer) => (\n  // \t<button\n  // \t\tclassName={`answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${\n  // \t\t\tanswer !== props.correct_answer && props.isChecked ? 'incorrect' : ''\n  // \t\t}`}\n  // \t\tkey={nanoid()}\n  // \t\tonClick={() => props.handleQuestionClick(props.id, props.question, answer)}\n  // \t>\n  // \t\t{answer}\n  // \t</button>\n  // ))\n  const [shuffledAnswers, setShuffledAnswers] = React.useState([...props.incorrect_answers].concat(props.correct_answer));\n  console.log(shuffledAnswers); // shuffle the array\n  // map the shuffled array to buttons\n\n  React.useEffect(() => {\n    setShuffledAnswers(prevState => {\n      const newState = [...prevState];\n      return shuffle(newState);\n    });\n  }, [props.correct_answer]);\n\n  function shuffle(array) {\n    let currentIndex = array.length,\n        temporaryValue,\n        randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question--wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"question\",\n      children: props.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"category\",\n      children: props.category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers\",\n      children: shuffledAnswers.map(answer => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${answer !== props.correct_answer && props.isChecked ? 'incorrect' : ''}`,\n        onClick: () => props.handleQuestionClick(props.question_id, props.question, answer),\n        children: answer\n      }, nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Question, \"SsI+Drvc+tbn9zk0Ql3KQ7rEyqI=\");\n\n_c = Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js"],"names":["React","nanoid","Question","props","shuffledAnswers","setShuffledAnswers","useState","incorrect_answers","concat","correct_answer","console","log","useEffect","prevState","newState","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","question","category","map","answer","selectedAnswer","isChecked","handleQuestionClick","question_id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvC;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCL,KAAK,CAACM,QAAN,CAAe,CAAC,GAAGH,KAAK,CAACI,iBAAV,EAA6BC,MAA7B,CAAoCL,KAAK,CAACM,cAA1C,CAAf,CAA9C;AAEAC,EAAAA,OAAO,CAACC,GAAR,CAAYP,eAAZ,EArDuC,CAsDvC;AACA;;AAEAJ,EAAAA,KAAK,CAACY,SAAN,CAAgB,MAAM;AACrBP,IAAAA,kBAAkB,CAAEQ,SAAD,IAAe;AACjC,YAAMC,QAAQ,GAAG,CAAC,GAAGD,SAAJ,CAAjB;AACA,aAAOE,OAAO,CAACD,QAAD,CAAd;AACA,KAHiB,CAAlB;AAIA,GALD,EAKG,CAACX,KAAK,CAACM,cAAP,CALH;;AAMA,WAASM,OAAT,CAAiBC,KAAjB,EAAwB;AACvB,QAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,QACCC,cADD;AAAA,QAECC,WAFD;;AAGA,WAAO,MAAMH,YAAb,EAA2B;AAC1BG,MAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,MAAAA,YAAY,IAAI,CAAhB;AACAE,MAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,MAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,MAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACA;;AACD,WAAOH,KAAP;AACA;;AAED,sBACC;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,4BACC;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0Bb,KAAK,CAACqB;AAAhC;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BrB,KAAK,CAACsB;AAAhC;AAAA;AAAA;AAAA;AAAA,YAFD,eAGC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBACErB,eAAe,CAACsB,GAAhB,CAAqBC,MAAD,iBACpB;AAEC,QAAA,SAAS,EAAG,UAASxB,KAAK,CAACyB,cAAN,KAAyBD,MAAzB,GAAkC,UAAlC,GAA+C,EAAG,IAAGA,MAAM,KAAKxB,KAAK,CAACM,cAAjB,IAAmCN,KAAK,CAAC0B,SAAzC,GAAqD,SAArD,GAAiE,EAAG,IAC7IF,MAAM,KAAKxB,KAAK,CAACM,cAAjB,IAAmCN,KAAK,CAAC0B,SAAzC,GAAqD,WAArD,GAAmE,EACnE,EAJF;AAKC,QAAA,OAAO,EAAE,MAAM1B,KAAK,CAAC2B,mBAAN,CAA0B3B,KAAK,CAAC4B,WAAhC,EAA6C5B,KAAK,CAACqB,QAAnD,EAA6DG,MAA7D,CALhB;AAAA,kBAOEA;AAPF,SACM1B,MAAM,EADZ;AAAA;AAAA;AAAA;AAAA,cADA;AADF;AAAA;AAAA;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAmBA;;GAhGuBC,Q;;KAAAA,Q","sourcesContent":["import React from 'react'\nimport './question.css'\nimport { nanoid } from 'nanoid'\n\nexport default function Question(props) {\n\t// const [shuffledAnswers, setShuffledAnswers] = React.useState([])\n\t// // all answers equal props.incorrect_answers + props.correct_answer\n\n\t// function shuffle(array) {\n\t// \tlet currentIndex = array.length,\n\t// \t\ttemporaryValue,\n\t// \t\trandomIndex\n\t// \twhile (0 !== currentIndex) {\n\t// \t\trandomIndex = Math.floor(Math.random() * currentIndex)\n\t// \t\tcurrentIndex -= 1\n\t// \t\ttemporaryValue = array[currentIndex]\n\t// \t\tarray[currentIndex] = array[randomIndex]\n\t// \t\tarray[randomIndex] = temporaryValue\n\t// \t}\n\t// \treturn array\n\t// }\n\n\t// // React.useEffect(() => {\n\t// // \tconst shuffledAnswers = answers.sort(() => Math.random() - 0.5)\n\t// // \tsetShuffledAnswers(shuffle(shuffledAnswers))\n\t// // }, [props.result])\n\n\t// const [randomArray, setRandomArray] = React.useState([])\n\t// const answers = props.incorrect_answers.concat(props.correct_answer)\n\n\t// console.log(props)\n\t// React.useEffect(\n\t// \tfunction () {\n\t// \t\tsetRandomArray(shuffle(answers))\n\t// \t},\n\t// \t[props.correct_answer]\n\t// )\n\n\t// React.useEffect(() => {\n\t// \tconsole.log('shuffling answers')\n\t// \tsetShuffledAnswers(shuffle(allAnswers))\n\t// }, [])\n\n\t// let sortedAnswers = shuffledAnswers.map((answer) => (\n\t// \t<button\n\t// \t\tclassName={`answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${\n\t// \t\t\tanswer !== props.correct_answer && props.isChecked ? 'incorrect' : ''\n\t// \t\t}`}\n\t// \t\tkey={nanoid()}\n\t// \t\tonClick={() => props.handleQuestionClick(props.id, props.question, answer)}\n\t// \t>\n\t// \t\t{answer}\n\t// \t</button>\n\t// ))\n\n\tconst [shuffledAnswers, setShuffledAnswers] = React.useState([...props.incorrect_answers].concat(props.correct_answer))\n\n\tconsole.log(shuffledAnswers)\n\t// shuffle the array\n\t// map the shuffled array to buttons\n\n\tReact.useEffect(() => {\n\t\tsetShuffledAnswers((prevState) => {\n\t\t\tconst newState = [...prevState]\n\t\t\treturn shuffle(newState)\n\t\t})\n\t}, [props.correct_answer])\n\tfunction shuffle(array) {\n\t\tlet currentIndex = array.length,\n\t\t\ttemporaryValue,\n\t\t\trandomIndex\n\t\twhile (0 !== currentIndex) {\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex)\n\t\t\tcurrentIndex -= 1\n\t\t\ttemporaryValue = array[currentIndex]\n\t\t\tarray[currentIndex] = array[randomIndex]\n\t\t\tarray[randomIndex] = temporaryValue\n\t\t}\n\t\treturn array\n\t}\n\n\treturn (\n\t\t<div className='question--wrapper'>\n\t\t\t<h1 className='question'>{props.question}</h1>\n\t\t\t<h2 className='category'>{props.category}</h2>\n\t\t\t<div className='answers'>\n\t\t\t\t{shuffledAnswers.map((answer) => (\n\t\t\t\t\t<button\n\t\t\t\t\t\tkey={nanoid()}\n\t\t\t\t\t\tclassName={`answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${\n\t\t\t\t\t\t\tanswer !== props.correct_answer && props.isChecked ? 'incorrect' : ''\n\t\t\t\t\t\t}`}\n\t\t\t\t\t\tonClick={() => props.handleQuestionClick(props.question_id, props.question, answer)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{answer}\n\t\t\t\t\t</button>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}