{"ast":null,"code":"var _jsxFileName = \"/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport Question from './components/Question';\nimport Start from './components/Start';\nimport Options from './components/Options';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]);\n  const [selectedAnswers, setSelectedAnswers] = React.useState([]);\n  const [isChecked, setIsChecked] = React.useState(false);\n  const [options, setOptions] = React.useState({\n    difficulty: '',\n    category: '11',\n    amount: '2'\n  }); //  let qs = data.results.map((item, i) => {\n  // \t\t\t\t\tconst entities = {\n  // \t\t\t\t\t\t'&#039;': \"'\",\n  // \t\t\t\t\t\t'&quot;': '\"',\n  // \t\t\t\t\t\t'&ntilde;': 'ñ',\n  // \t\t\t\t\t\t'&eacute;': 'é',\n  // \t\t\t\t\t\t'&amp;': '&',\n  // \t\t\t\t\t\t'&uuml;': 'ü',\n  // \t\t\t\t\t}\n\n  const pItems = data.results[i].incorrect_answers.map((item, j) => data.results[i]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [data.results[i].question.replace(/&#?\\w+;/g, match => entities[match]), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [pItems, /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"radio\",\n          name: 'question' + i,\n          value: \"correct_answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\" \", data.results[i].correct_answer.replace(/&#?\\w+;/g, match => entities[match])]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this)\n  }, i.toString(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 8\n  }, this); // \t\t\t\t})\n  // get data from api and return it\n\n  function getQuestions() {\n    // fetch from api\n    fetch('https://opentdb.com/api.php?amount=' + options.amount + '&category=' + options.category + '&difficulty=' + options.difficulty).then(response => response.json()).then(data => {\n      data.results.forEach(question => {\n        question.incorrect_answers.push(question.correct_answer);\n        question.incorrect_answers = question.incorrect_answers.sort();\n      });\n      const entities = {\n        '&#039;': \"'\",\n        '&quot;': '\"',\n        '&ntilde;': 'ñ',\n        '&eacute;': 'é',\n        '&amp;': '&',\n        '&uuml;': 'ü'\n      };\n      setQuestions(data.results);\n    }).catch(error => console.log(error));\n  }\n\n  function handleQuestionClick(questionId, question, answer) {\n    if (!isChecked) {\n      setSelectedAnswers(prevState => {\n        const newState = { ...prevState\n        };\n        newState[questionId] = answer;\n        return newState;\n      });\n    }\n  }\n\n  React.useEffect(() => {\n    getQuestions();\n  }, []); // compare answers with correct answer\n\n  function checkAnswers() {\n    setIsChecked(true);\n    const correctAnswers = questions.map(question => question.correct_answer); // for each selectedAnswer, if is in correctAnswers, set points +1\n    // if not, set points -1\n\n    const points = Object.keys(selectedAnswers).reduce((points, key) => {\n      if (correctAnswers.includes(selectedAnswers[key])) {\n        return points + 1;\n      } else {\n        return;\n      }\n    }, 0); // console.log(selectedAnswers)\n    // const numberOfCorrectAnswers = correctAnswers.map((answers) => (selectedAnswers.includes(answers) ? 1 : 0))\n    // console.log(numberOfCorrectAnswers)\n    //const correct = correctAnswers.filter((answer) => selectedAnswers[answer] === answer)\n    // console.log(correct.length)\n  } // map questions to question components\n\n\n  console.log(questions);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Start, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Options, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 4\n    }, this), questions.map(question => /*#__PURE__*/_jsxDEV(Question, {\n      id: questions.indexOf(question),\n      question: question.question,\n      category: question.category,\n      correct_answer: question.correct_answer,\n      incorrect_answers: question.incorrect_answers,\n      answers: question.answers,\n      handleQuestionClick: handleQuestionClick,\n      selectedAnswer: selectedAnswers[questions.indexOf(question)],\n      isChecked: isChecked\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 5\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"check\",\n      onClick: checkAnswers,\n      children: \"Check Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"dm1vKotlgNtwuI40RYGjLTQ9N5k=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js"],"names":["React","Question","Start","Options","nanoid","App","questions","setQuestions","useState","selectedAnswers","setSelectedAnswers","isChecked","setIsChecked","options","setOptions","difficulty","category","amount","pItems","data","results","i","incorrect_answers","map","item","j","question","replace","match","entities","correct_answer","toString","getQuestions","fetch","then","response","json","forEach","push","sort","catch","error","console","log","handleQuestionClick","questionId","answer","prevState","newState","useEffect","checkAnswers","correctAnswers","points","Object","keys","reduce","key","includes","indexOf","answers"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css'\nimport Question from './components/Question'\nimport Start from './components/Start'\nimport Options from './components/Options'\nimport { nanoid } from 'nanoid'\n\nexport default function App() {\n\tconst [questions, setQuestions] = React.useState([])\n\tconst [selectedAnswers, setSelectedAnswers] = React.useState([])\n\tconst [isChecked, setIsChecked] = React.useState(false)\n\tconst [options, setOptions] = React.useState({\n\t\tdifficulty: '',\n\t\tcategory: '11',\n\t\tamount: '2',\n\t})\n\n\t//  let qs = data.results.map((item, i) => {\n\t// \t\t\t\t\tconst entities = {\n\t// \t\t\t\t\t\t'&#039;': \"'\",\n\t// \t\t\t\t\t\t'&quot;': '\"',\n\t// \t\t\t\t\t\t'&ntilde;': 'ñ',\n\t// \t\t\t\t\t\t'&eacute;': 'é',\n\t// \t\t\t\t\t\t'&amp;': '&',\n\t// \t\t\t\t\t\t'&uuml;': 'ü',\n\t// \t\t\t\t\t}\n\t\t\t\t\t\tconst pItems = data.results[i].incorrect_answers.map((item, j) => (\n\t\tdata.results[i]\n\t\t\t\t\t\t))\n\n\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t<div key={i.toString()}>\n\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t{data.results[i].question.replace(/&#?\\w+;/g, (match) => entities[match])}\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t\t<div>\n\t\t\t\t\t\t\t\t\t\t{pItems}\n\t\t\t\t\t\t\t\t\t\t<input type='radio' name={'question' + i} value='correct_answer' />\n\t\t\t\t\t\t\t\t\t\t<p> {data.results[i].correct_answer.replace(/&#?\\w+;/g, (match) => entities[match])}</p>\n\t\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t\t<br />\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t)\n\t// \t\t\t\t})\n\n\t// get data from api and return it\n\tfunction getQuestions() {\n\t\t// fetch from api\n\t\tfetch('https://opentdb.com/api.php?amount=' + options.amount + '&category=' + options.category + '&difficulty=' + options.difficulty)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tdata.results.forEach((question) => {\n\t\t\t\t\tquestion.incorrect_answers.push(question.correct_answer)\n\t\t\t\t\tquestion.incorrect_answers = question.incorrect_answers.sort()\n\t\t\t\t})\n\t\t\t\tconst entities = {\n\t\t\t\t\t'&#039;': \"'\",\n\t\t\t\t\t'&quot;': '\"',\n\t\t\t\t\t'&ntilde;': 'ñ',\n\t\t\t\t\t'&eacute;': 'é',\n\t\t\t\t\t'&amp;': '&',\n\t\t\t\t\t'&uuml;': 'ü',\n\t\t\t\t}\n\t\t\t\tsetQuestions(data.results)\n\t\t\t})\n\t\t\t.catch((error) => console.log(error))\n\t}\n\n\tfunction handleQuestionClick(questionId, question, answer) {\n\t\tif (!isChecked) {\n\t\t\tsetSelectedAnswers((prevState) => {\n\t\t\t\tconst newState = { ...prevState }\n\t\t\t\tnewState[questionId] = answer\n\t\t\t\treturn newState\n\t\t\t})\n\t\t}\n\t}\n\n\tReact.useEffect(() => {\n\t\tgetQuestions()\n\t}, [])\n\n\t// compare answers with correct answer\n\tfunction checkAnswers() {\n\t\tsetIsChecked(true)\n\t\tconst correctAnswers = questions.map((question) => question.correct_answer)\n\t\t// for each selectedAnswer, if is in correctAnswers, set points +1\n\t\t// if not, set points -1\n\t\tconst points = Object.keys(selectedAnswers).reduce((points, key) => {\n\t\t\tif (correctAnswers.includes(selectedAnswers[key])) {\n\t\t\t\treturn points + 1\n\t\t\t} else {\n\t\t\t\treturn\n\t\t\t}\n\t\t}, 0)\n\n\t\t// console.log(selectedAnswers)\n\t\t// const numberOfCorrectAnswers = correctAnswers.map((answers) => (selectedAnswers.includes(answers) ? 1 : 0))\n\t\t// console.log(numberOfCorrectAnswers)\n\t\t//const correct = correctAnswers.filter((answer) => selectedAnswers[answer] === answer)\n\t\t// console.log(correct.length)\n\t}\n\n\t// map questions to question components\n\tconsole.log(questions)\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Start />\n\t\t\t<Options />\n\t\t\t{questions.map((question) => (\n\t\t\t\t<Question\n\t\t\t\t\tkey={nanoid()}\n\t\t\t\t\tid={questions.indexOf(question)}\n\t\t\t\t\tquestion={question.question}\n\t\t\t\t\tcategory={question.category}\n\t\t\t\t\tcorrect_answer={question.correct_answer}\n\t\t\t\t\tincorrect_answers={question.incorrect_answers}\n\t\t\t\t\tanswers={question.answers}\n\t\t\t\t\thandleQuestionClick={handleQuestionClick}\n\t\t\t\t\tselectedAnswer={selectedAnswers[questions.indexOf(question)]}\n\t\t\t\t\tisChecked={isChecked}\n\t\t\t\t/>\n\t\t\t))}\n\t\t\t<button className='check' onClick={checkAnswers}>\n\t\t\t\tCheck Answers\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}