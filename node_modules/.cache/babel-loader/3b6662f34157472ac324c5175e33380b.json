{"ast":null,"code":"var _jsxFileName = \"/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './question.css';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Question(props) {\n  _s();\n\n  const [shuffledAnswers, setShuffledAnswers] = React.useState(props.correct_answer);\n  React.useEffect(() => {\n    setShuffledAnswers(prevState => {\n      const newState = [...prevState];\n      return shuffle(newState);\n    });\n  }, []);\n\n  function shuffle(array) {\n    let currentIndex = array.length,\n        temporaryValue,\n        randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  }\n\n  const sortedAnswers = shuffledAnswers.map(answer => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${answer !== props.correct_answer && props.isChecked ? 'incorrect' : ''}`,\n    onClick: () => props.handleQuestionClick(props.id, props.question, answer),\n    children: answer\n  }, nanoid(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 3\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question--wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"question\",\n      children: props.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"category\",\n      children: props.category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"answers\",\n        children: sortedAnswers\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Question, \"xJ4uvdnuVuSCzBOT2s6zmAbFtVY=\");\n\n_c = Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js"],"names":["React","nanoid","Question","props","shuffledAnswers","setShuffledAnswers","useState","correct_answer","useEffect","prevState","newState","shuffle","array","currentIndex","length","temporaryValue","randomIndex","Math","floor","random","sortedAnswers","map","answer","selectedAnswer","isChecked","handleQuestionClick","id","question","category"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCL,KAAK,CAACM,QAAN,CAAeH,KAAK,CAACI,cAArB,CAA9C;AAEAP,EAAAA,KAAK,CAACQ,SAAN,CAAgB,MAAM;AACrBH,IAAAA,kBAAkB,CAAEI,SAAD,IAAe;AACjC,YAAMC,QAAQ,GAAG,CAAC,GAAGD,SAAJ,CAAjB;AACA,aAAOE,OAAO,CAACD,QAAD,CAAd;AACA,KAHiB,CAAlB;AAIA,GALD,EAKG,EALH;;AAOA,WAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACvB,QAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,QACCC,cADD;AAAA,QAECC,WAFD;;AAGA,WAAO,MAAMH,YAAb,EAA2B;AAC1BG,MAAAA,WAAW,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,MAAL,KAAgBN,YAA3B,CAAd;AACAA,MAAAA,YAAY,IAAI,CAAhB;AACAE,MAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,MAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,MAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACA;;AACD,WAAOH,KAAP;AACA;;AAED,QAAMQ,aAAa,GAAGhB,eAAe,CAACiB,GAAhB,CAAqBC,MAAD,iBACzC;AACC,IAAA,SAAS,EAAG,UAASnB,KAAK,CAACoB,cAAN,KAAyBD,MAAzB,GAAkC,UAAlC,GAA+C,EAAG,IAAGA,MAAM,KAAKnB,KAAK,CAACI,cAAjB,IAAmCJ,KAAK,CAACqB,SAAzC,GAAqD,SAArD,GAAiE,EAAG,IAC7IF,MAAM,KAAKnB,KAAK,CAACI,cAAjB,IAAmCJ,KAAK,CAACqB,SAAzC,GAAqD,WAArD,GAAmE,EACnE,EAHF;AAKC,IAAA,OAAO,EAAE,MAAMrB,KAAK,CAACsB,mBAAN,CAA0BtB,KAAK,CAACuB,EAAhC,EAAoCvB,KAAK,CAACwB,QAA1C,EAAoDL,MAApD,CALhB;AAAA,cAOEA;AAPF,KAIMrB,MAAM,EAJZ;AAAA;AAAA;AAAA;AAAA,UADqB,CAAtB;AAYA,sBACC;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,4BACC;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BE,KAAK,CAACwB;AAAhC;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BxB,KAAK,CAACyB;AAAhC;AAAA;AAAA;AAAA;AAAA,YAFD,eAGC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,6BACC;AAAK,QAAA,SAAS,EAAC,SAAf;AAAA,kBAA0BR;AAA1B;AAAA;AAAA;AAAA;AAAA;AADD;AAAA;AAAA;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AASA;;GA7CuBlB,Q;;KAAAA,Q","sourcesContent":["import React from 'react'\nimport './question.css'\nimport { nanoid } from 'nanoid'\n\nexport default function Question(props) {\n\tconst [shuffledAnswers, setShuffledAnswers] = React.useState(props.correct_answer)\n\n\tReact.useEffect(() => {\n\t\tsetShuffledAnswers((prevState) => {\n\t\t\tconst newState = [...prevState]\n\t\t\treturn shuffle(newState)\n\t\t})\n\t}, [])\n\n\tfunction shuffle(array) {\n\t\tlet currentIndex = array.length,\n\t\t\ttemporaryValue,\n\t\t\trandomIndex\n\t\twhile (0 !== currentIndex) {\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex)\n\t\t\tcurrentIndex -= 1\n\t\t\ttemporaryValue = array[currentIndex]\n\t\t\tarray[currentIndex] = array[randomIndex]\n\t\t\tarray[randomIndex] = temporaryValue\n\t\t}\n\t\treturn array\n\t}\n\n\tconst sortedAnswers = shuffledAnswers.map((answer) => (\n\t\t<button\n\t\t\tclassName={`answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${\n\t\t\t\tanswer !== props.correct_answer && props.isChecked ? 'incorrect' : ''\n\t\t\t}`}\n\t\t\tkey={nanoid()}\n\t\t\tonClick={() => props.handleQuestionClick(props.id, props.question, answer)}\n\t\t>\n\t\t\t{answer}\n\t\t</button>\n\t))\n\n\treturn (\n\t\t<div className='question--wrapper'>\n\t\t\t<h1 className='question'>{props.question}</h1>\n\t\t\t<h2 className='category'>{props.category}</h2>\n\t\t\t<div className='answers'>\n\t\t\t\t<div className='answers'>{sortedAnswers}</div>\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}