{"ast":null,"code":"var _jsxFileName = \"/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport Question from './components/Question';\nimport { nanoid } from 'https://cdn.jsdelivr.net/npm/nanoid/nanoid.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]); // get data from api and return it\n\n  function getQuestions() {\n    fetch('https://opentdb.com/api.php?amount=5').then(res => res.json()).then(data => setQuestions(data.results)).catch(err => console.log(err));\n  }\n\n  function handleQuestionClick(question, answer) {\n    console.log(question);\n    console.log(answer);\n  }\n\n  React.useEffect(() => {\n    getQuestions();\n    setQuestions(questionsWithKey);\n  }, []);\n  console.log(questionsWithKey); // map questions to question components\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: questions.map(question => /*#__PURE__*/_jsxDEV(Question // set a unique key for each question\n    , {\n      id: questions.indexOf(question),\n      question: question.question,\n      category: question.category,\n      correct_answer: question.correct_answer,\n      incorrect_answers: question.incorrect_answers,\n      handleQuestionClick: handleQuestionClick\n    }, question.key, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"1ery3Y2F+nTWSbC27k3nmjCRtvo=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js"],"names":["React","Question","nanoid","App","questions","setQuestions","useState","getQuestions","fetch","then","res","json","data","results","catch","err","console","log","handleQuestionClick","question","answer","useEffect","questionsWithKey","map","indexOf","category","correct_answer","incorrect_answers","key"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,SAASC,MAAT,QAAuB,+CAAvB;;AAEA,eAAe,SAASC,GAAT,GAAe;AAAA;;AAC7B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,KAAK,CAACM,QAAN,CAAe,EAAf,CAAlC,CAD6B,CAG7B;;AACA,WAASC,YAAT,GAAwB;AACvBC,IAAAA,KAAK,CAAC,sCAAD,CAAL,CACEC,IADF,CACQC,GAAD,IAASA,GAAG,CAACC,IAAJ,EADhB,EAEEF,IAFF,CAEQG,IAAD,IAAUP,YAAY,CAACO,IAAI,CAACC,OAAN,CAF7B,EAGEC,KAHF,CAGSC,GAAD,IAASC,OAAO,CAACC,GAAR,CAAYF,GAAZ,CAHjB;AAIA;;AAED,WAASG,mBAAT,CAA6BC,QAA7B,EAAuCC,MAAvC,EAA+C;AAC9CJ,IAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAYG,MAAZ;AACA;;AAEDpB,EAAAA,KAAK,CAACqB,SAAN,CAAgB,MAAM;AACrBd,IAAAA,YAAY;AACZF,IAAAA,YAAY,CAACiB,gBAAD,CAAZ;AACA,GAHD,EAGG,EAHH;AAMAN,EAAAA,OAAO,CAACC,GAAR,CAAYK,gBAAZ,EAtB6B,CAuB7B;;AAEA,sBACC;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA,cACElB,SAAS,CAACmB,GAAV,CAAeJ,QAAD,iBACd,QAAC,QAAD,CAEA;AAFA;AAMC,MAAA,EAAE,EAAEf,SAAS,CAACoB,OAAV,CAAkBL,QAAlB,CANL;AAOC,MAAA,QAAQ,EAAEA,QAAQ,CAACA,QAPpB;AAQC,MAAA,QAAQ,EAAEA,QAAQ,CAACM,QARpB;AASC,MAAA,cAAc,EAAEN,QAAQ,CAACO,cAT1B;AAUC,MAAA,iBAAiB,EAAEP,QAAQ,CAACQ,iBAV7B;AAWC,MAAA,mBAAmB,EAAET;AAXtB,OAKMC,QAAQ,CAACS,GALf;AAAA;AAAA;AAAA;AAAA,YADA;AADF;AAAA;AAAA;AAAA;AAAA,UADD;AAmBA;;GA5CuBzB,G;;KAAAA,G","sourcesContent":["import React from 'react'\nimport './App.css'\nimport Question from './components/Question'\nimport { nanoid } from 'https://cdn.jsdelivr.net/npm/nanoid/nanoid.js'\n\nexport default function App() {\n\tconst [questions, setQuestions] = React.useState([])\n\n\t// get data from api and return it\n\tfunction getQuestions() {\n\t\tfetch('https://opentdb.com/api.php?amount=5')\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => setQuestions(data.results))\n\t\t\t.catch((err) => console.log(err))\n\t}\n\n\tfunction handleQuestionClick(question, answer) {\n\t\tconsole.log(question)\n\t\tconsole.log(answer)\n\t}\n\n\tReact.useEffect(() => {\n\t\tgetQuestions()\n\t\tsetQuestions(questionsWithKey)\n\t}, [])\n\n\n\tconsole.log(questionsWithKey)\n\t// map questions to question components\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t{questions.map((question) => (\n\t\t\t\t<Question\n\n\t\t\t\t// set a unique key for each question\n\n\n\t\t\t\t\tkey={question.key}\n\t\t\t\t\tid={questions.indexOf(question)}\n\t\t\t\t\tquestion={question.question}\n\t\t\t\t\tcategory={question.category}\n\t\t\t\t\tcorrect_answer={question.correct_answer}\n\t\t\t\t\tincorrect_answers={question.incorrect_answers}\n\t\t\t\t\thandleQuestionClick={handleQuestionClick}\n\t\t\t\t/>\n\t\t\t))}\n\t\t</div>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}