{"ast":null,"code":"var _jsxFileName = \"/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js\";\nimport React from 'react';\nimport './question.css';\nimport { nanoid } from 'nanoid';\nimport he from 'he'; // Change h1 and div for fieldset, inputs and legend\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Question(props) {\n  const sortedAnswers = /*#__PURE__*/_jsxDEV(\"fieldset\", {\n    className: \"answers\",\n    children: [\"props.incorrect_answers.map((answer) => (\", /*#__PURE__*/_jsxDEV(\"input\", {\n      className: `answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${answer !== props.correct_answer && props.isChecked ? 'incorrect' : ''}`,\n      onClick: () => props.handleQuestionClick(props.id, answer)\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 11,\n      columnNumber: 3\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"amount-1\",\n      children: he.decode(answer)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 18,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 2\n  }, this);\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: `question--wrapper ${props.className}`,\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"question\",\n      children: he.decode(props.question)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"category\",\n      children: he.decode(props.category)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers\",\n      children: sortedAnswers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 3\n  }, this);\n} // export default function Question(props) {\n// \tconst sortedAnswers = props.incorrect_answers.map((answer) => (\n// \t\t<button\n// \t\t\tclassName={`answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${\n// \t\t\t\tanswer !== props.correct_answer && props.isChecked ? 'incorrect' : ''\n// \t\t\t}`}\n// \t\t\tkey={nanoid()}\n// \t\t\tonClick={() => props.handleQuestionClick(props.id, answer)}\n// \t\t>\n// \t\t\t{he.decode(answer)}\n// \t\t</button>\n// \t))\n// \treturn (\n// \t\t<div className={`question--wrapper ${props.className}`}>\n// \t\t\t<h1 className='question'>{he.decode(props.question)}</h1>\n// \t\t\t<h2 className='category'>{he.decode(props.category)}</h2>\n// \t\t\t<div className='answers'>\n// \t\t\t\t<div className='answers'>{sortedAnswers}</div>\n// \t\t\t</div>\n// \t\t</div>\n// \t)\n// }\n\n_c = Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js"],"names":["React","nanoid","he","Question","props","sortedAnswers","selectedAnswer","answer","correct_answer","isChecked","handleQuestionClick","id","decode","className","question","category"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;AACA,OAAOC,EAAP,MAAe,IAAf,C,CAEA;;;AACA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AACvC,QAAMC,aAAa,gBACnB;AAAU,IAAA,SAAS,EAAC,SAApB;AAAA,yEAEC;AACC,MAAA,SAAS,EAAG,UAASD,KAAK,CAACE,cAAN,KAAyBC,MAAzB,GAAkC,UAAlC,GAA+C,EAAG,IAAGA,MAAM,KAAKH,KAAK,CAACI,cAAjB,IAAmCJ,KAAK,CAACK,SAAzC,GAAqD,SAArD,GAAiE,EAAG,IAC7IF,MAAM,KAAKH,KAAK,CAACI,cAAjB,IAAmCJ,KAAK,CAACK,SAAzC,GAAqD,WAArD,GAAmE,EACnE,EAHF;AAKC,MAAA,OAAO,EAAE,MAAML,KAAK,CAACM,mBAAN,CAA0BN,KAAK,CAACO,EAAhC,EAAoCJ,MAApC;AALhB,OAIMN,MAAM,EAJZ;AAAA;AAAA;AAAA;AAAA,YAFD,eASC;AAAO,MAAA,OAAO,EAAC,UAAf;AAAA,gBAA2BC,EAAE,CAACU,MAAH,CAAUL,MAAV;AAA3B;AAAA;AAAA;AAAA;AAAA,YATD;AAAA;AAAA;AAAA;AAAA;AAAA,UADA;;AAeA,sBACC;AAAK,IAAA,SAAS,EAAG,qBAAoBH,KAAK,CAACS,SAAU,EAArD;AAAA,4BACC;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BX,EAAE,CAACU,MAAH,CAAUR,KAAK,CAACU,QAAhB;AAA1B;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BZ,EAAE,CAACU,MAAH,CAAUR,KAAK,CAACW,QAAhB;AAA1B;AAAA;AAAA;AAAA;AAAA,YAFD,eAGC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBACEV;AADF;AAAA;AAAA;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AASA,C,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;KAjDwBF,Q","sourcesContent":["import React from 'react'\nimport './question.css'\nimport { nanoid } from 'nanoid'\nimport he from 'he'\n\n// Change h1 and div for fieldset, inputs and legend\nexport default function Question(props) {\n\tconst sortedAnswers = \n\t<fieldset className='answers'>\n\tprops.incorrect_answers.map((answer) => (\n\t\t<input\n\t\t\tclassName={`answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${\n\t\t\t\tanswer !== props.correct_answer && props.isChecked ? 'incorrect' : ''\n\t\t\t}`}\n\t\t\tkey={nanoid()}\n\t\t\tonClick={() => props.handleQuestionClick(props.id, answer)}\n\t\t/>\n\t\t<label htmlFor='amount-1'>{he.decode(answer)}</label>\n</fieldset>\n\t\t\t\n\t\t\t\n\n\treturn (\n\t\t<div className={`question--wrapper ${props.className}`}>\n\t\t\t<h1 className='question'>{he.decode(props.question)}</h1>\n\t\t\t<h2 className='category'>{he.decode(props.category)}</h2>\n\t\t\t<div className='answers'>\n\t\t\t\t{sortedAnswers}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n\n// export default function Question(props) {\n// \tconst sortedAnswers = props.incorrect_answers.map((answer) => (\n// \t\t<button\n// \t\t\tclassName={`answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${\n// \t\t\t\tanswer !== props.correct_answer && props.isChecked ? 'incorrect' : ''\n// \t\t\t}`}\n// \t\t\tkey={nanoid()}\n// \t\t\tonClick={() => props.handleQuestionClick(props.id, answer)}\n// \t\t>\n// \t\t\t{he.decode(answer)}\n// \t\t</button>\n// \t))\n\n// \treturn (\n// \t\t<div className={`question--wrapper ${props.className}`}>\n// \t\t\t<h1 className='question'>{he.decode(props.question)}</h1>\n// \t\t\t<h2 className='category'>{he.decode(props.category)}</h2>\n// \t\t\t<div className='answers'>\n// \t\t\t\t<div className='answers'>{sortedAnswers}</div>\n// \t\t\t</div>\n// \t\t</div>\n// \t)\n// }\n"]},"metadata":{},"sourceType":"module"}