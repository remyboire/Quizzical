{"ast":null,"code":"var _jsxFileName = \"/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './question.css';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Question(props) {\n  _s();\n\n  const [shuffledAnswers, setShuffledAnswers] = React.useState(shuffle([...props.incorrect_answers].concat(props.correct_answer))); // React.useEffect(() => {\n  // \tsetShuffledAnswers((prevState) => {\n  // \t\tconst newState = [...prevState]\n  // \t\treturn shuffle(newState)\n  // \t})\n  // }, [props.isChecked])\n  // function shuffle(array) {\n  // \tlet currentIndex = array.length,\n  // \t\ttemporaryValue,\n  // \t\trandomIndex\n  // \twhile (0 !== currentIndex) {\n  // \t\trandomIndex = Math.floor(Math.random() * currentIndex)\n  // \t\tcurrentIndex -= 1\n  // \t\ttemporaryValue = array[currentIndex]\n  // \t\tarray[currentIndex] = array[randomIndex]\n  // \t\tarray[randomIndex] = temporaryValue\n  // \t}\n  // \treturn array\n  // }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question--wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"question\",\n      children: props.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"category\",\n      children: props.category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers\",\n      children: shuffledAnswers.map(answer => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${answer !== props.correct_answer && props.isChecked ? 'incorrect' : ''}`,\n        onClick: () => props.handleQuestionClick(props.question_id, props.question, answer),\n        children: answer\n      }, nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Question, \"T85dmWXrvjDcJIeKa9c5CSKVeMY=\");\n\n_c = Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js"],"names":["React","nanoid","Question","props","shuffledAnswers","setShuffledAnswers","useState","shuffle","incorrect_answers","concat","correct_answer","question","category","map","answer","selectedAnswer","isChecked","handleQuestionClick","question_id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCL,KAAK,CAACM,QAAN,CAAeC,OAAO,CAAC,CAAC,GAAGJ,KAAK,CAACK,iBAAV,EAA6BC,MAA7B,CAAoCN,KAAK,CAACO,cAA1C,CAAD,CAAtB,CAA9C,CADuC,CAGvC;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,sBACC;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,4BACC;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BP,KAAK,CAACQ;AAAhC;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BR,KAAK,CAACS;AAAhC;AAAA;AAAA;AAAA;AAAA,YAFD,eAGC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBACER,eAAe,CAACS,GAAhB,CAAqBC,MAAD,iBACpB;AAEC,QAAA,SAAS,EAAG,UAASX,KAAK,CAACY,cAAN,KAAyBD,MAAzB,GAAkC,UAAlC,GAA+C,EAAG,IAAGA,MAAM,KAAKX,KAAK,CAACO,cAAjB,IAAmCP,KAAK,CAACa,SAAzC,GAAqD,SAArD,GAAiE,EAAG,IAC7IF,MAAM,KAAKX,KAAK,CAACO,cAAjB,IAAmCP,KAAK,CAACa,SAAzC,GAAqD,WAArD,GAAmE,EACnE,EAJF;AAKC,QAAA,OAAO,EAAE,MAAMb,KAAK,CAACc,mBAAN,CAA0Bd,KAAK,CAACe,WAAhC,EAA6Cf,KAAK,CAACQ,QAAnD,EAA6DG,MAA7D,CALhB;AAAA,kBAOEA;AAPF,SACMb,MAAM,EADZ;AAAA;AAAA;AAAA;AAAA,cADA;AADF;AAAA;AAAA;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAmBA;;GA3CuBC,Q;;KAAAA,Q","sourcesContent":["import React from 'react'\nimport './question.css'\nimport { nanoid } from 'nanoid'\n\nexport default function Question(props) {\n\tconst [shuffledAnswers, setShuffledAnswers] = React.useState(shuffle([...props.incorrect_answers].concat(props.correct_answer)))\n\n\t// React.useEffect(() => {\n\t// \tsetShuffledAnswers((prevState) => {\n\t// \t\tconst newState = [...prevState]\n\t// \t\treturn shuffle(newState)\n\t// \t})\n\t// }, [props.isChecked])\n\n\t// function shuffle(array) {\n\t// \tlet currentIndex = array.length,\n\t// \t\ttemporaryValue,\n\t// \t\trandomIndex\n\t// \twhile (0 !== currentIndex) {\n\t// \t\trandomIndex = Math.floor(Math.random() * currentIndex)\n\t// \t\tcurrentIndex -= 1\n\t// \t\ttemporaryValue = array[currentIndex]\n\t// \t\tarray[currentIndex] = array[randomIndex]\n\t// \t\tarray[randomIndex] = temporaryValue\n\t// \t}\n\t// \treturn array\n\t// }\n\n\treturn (\n\t\t<div className='question--wrapper'>\n\t\t\t<h1 className='question'>{props.question}</h1>\n\t\t\t<h2 className='category'>{props.category}</h2>\n\t\t\t<div className='answers'>\n\t\t\t\t{shuffledAnswers.map((answer) => (\n\t\t\t\t\t<button\n\t\t\t\t\t\tkey={nanoid()}\n\t\t\t\t\t\tclassName={`answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${\n\t\t\t\t\t\t\tanswer !== props.correct_answer && props.isChecked ? 'incorrect' : ''\n\t\t\t\t\t\t}`}\n\t\t\t\t\t\tonClick={() => props.handleQuestionClick(props.question_id, props.question, answer)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{answer}\n\t\t\t\t\t</button>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}