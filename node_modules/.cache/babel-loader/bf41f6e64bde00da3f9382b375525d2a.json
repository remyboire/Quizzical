{"ast":null,"code":"var _jsxFileName = \"/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport Question from './components/Question';\nimport Start from './components/Start';\nimport Options from './components/Options';\nimport Results from './components/Results';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]);\n  const [selectedAnswers, setSelectedAnswers] = React.useState([]);\n  const [isChecked, setIsChecked] = React.useState(false);\n  const [options, setOptions] = React.useState({\n    difficulty: 'easy',\n    category: '11',\n    amount: '5'\n  });\n  const [score, setScore] = React.useState({});\n  const [turn, setTurn] = React.useState(0);\n  console.log(score); // get data from api and return it\n\n  function getQuestions() {\n    // fetch from api\n    fetch('https://opentdb.com/api.php?amount=' + options.amount + '&category=' + options.category + '&difficulty=' + options.difficulty + '&type=boolean').then(response => response.json()).then(data => {\n      data.results.forEach(question => {\n        question.incorrect_answers.push(question.correct_answer);\n        question.incorrect_answers = question.incorrect_answers.sort();\n      });\n      setQuestions(data.results);\n    }).catch(error => console.log(error));\n  }\n\n  function handleOptionsChange(event) {\n    console.log(event.target.name);\n    console.log(event.target.value);\n    setOptions(prevOptions => {\n      return { ...prevOptions,\n        [event.target.name]: event.target.value\n      };\n    });\n    console.log(options);\n  }\n\n  function handleChange(event) {\n    console.log(event);\n    const {\n      name,\n      value,\n      type,\n      checked\n    } = event.target;\n    setFormData(prevFormData => {\n      return { ...prevFormData,\n        [name]: type === 'checkbox' ? checked : value\n      };\n    });\n  }\n\n  function handleQuestionClick(questionId, answer) {\n    if (!isChecked) {\n      setSelectedAnswers(prevState => {\n        const newState = { ...prevState\n        };\n        newState[questionId] = answer;\n        return newState;\n      });\n    }\n  }\n\n  React.useEffect(() => {\n    getQuestions();\n  }, []); // compare answers with correct answer\n\n  function checkAnswers() {\n    setIsChecked(true);\n    const correctAnswers = questions.map(question => question.correct_answer);\n    let count = 0;\n    Object.keys(selectedAnswers).map(key => {\n      if (selectedAnswers[key] === correctAnswers[key]) {\n        return count++;\n      }\n    });\n    setScore(prevState => {\n      const newState = { ...prevState\n      };\n      newState[turn] = {\n        turn: turn,\n        correctsAnswers: count,\n        questions: questions.length\n      };\n      return newState;\n    });\n  }\n\n  function restartGame() {\n    setTurn(prevTurn => prevTurn + 1);\n    setIsChecked(false);\n    setSelectedAnswers([]);\n    getQuestions();\n  } // map questions to question components\n  // console.log(questions)\n  // take all scores from score object and add them in a total score const\n\n\n  const totalScore = Object.values(score).reduce((acc, curr) => {\n    return acc + curr.correctsAnswers;\n  }, 0);\n  const totalQuestions = Object.values(score).reduce((acc, curr) => {\n    return acc + curr.questions;\n  }, 0);\n  const totalTurns = Object.keys(score).length;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Start, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(Options, {\n      options: options,\n      handleOptionsChange: handleOptionsChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 113,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"VvFp0qJmI/QxnmUdQurhwAj6xVc=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js"],"names":["React","Question","Start","Options","Results","nanoid","App","questions","setQuestions","useState","selectedAnswers","setSelectedAnswers","isChecked","setIsChecked","options","setOptions","difficulty","category","amount","score","setScore","turn","setTurn","console","log","getQuestions","fetch","then","response","json","data","results","forEach","question","incorrect_answers","push","correct_answer","sort","catch","error","handleOptionsChange","event","target","name","value","prevOptions","handleChange","type","checked","setFormData","prevFormData","handleQuestionClick","questionId","answer","prevState","newState","useEffect","checkAnswers","correctAnswers","map","count","Object","keys","key","correctsAnswers","length","restartGame","prevTurn","totalScore","values","reduce","acc","curr","totalQuestions","totalTurns"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css'\nimport Question from './components/Question'\nimport Start from './components/Start'\nimport Options from './components/Options'\nimport Results from './components/Results'\nimport { nanoid } from 'nanoid'\n\nexport default function App() {\n\tconst [questions, setQuestions] = React.useState([])\n\tconst [selectedAnswers, setSelectedAnswers] = React.useState([])\n\tconst [isChecked, setIsChecked] = React.useState(false)\n\tconst [options, setOptions] = React.useState({\n\t\tdifficulty: 'easy',\n\t\tcategory: '11',\n\t\tamount: '5',\n\t})\n\tconst [score, setScore] = React.useState({})\n\tconst [turn, setTurn] = React.useState(0)\n\n\tconsole.log(score)\n\t// get data from api and return it\n\tfunction getQuestions() {\n\t\t// fetch from api\n\t\tfetch('https://opentdb.com/api.php?amount=' + options.amount + '&category=' + options.category + '&difficulty=' + options.difficulty + '&type=boolean')\n\t\t\t.then((response) => response.json())\n\t\t\t.then((data) => {\n\t\t\t\tdata.results.forEach((question) => {\n\t\t\t\t\tquestion.incorrect_answers.push(question.correct_answer)\n\t\t\t\t\tquestion.incorrect_answers = question.incorrect_answers.sort()\n\t\t\t\t})\n\t\t\t\tsetQuestions(data.results)\n\t\t\t})\n\t\t\t.catch((error) => console.log(error))\n\t}\n\tfunction handleOptionsChange(event) {\n\t\tconsole.log(event.target.name)\n\t\tconsole.log(event.target.value)\n\t\tsetOptions((prevOptions) => {\n\t\t\treturn {\n\t\t\t\t...prevOptions,\n\t\t\t\t[event.target.name]: event.target.value,\n\t\t\t}\n\t\t})\n\t\tconsole.log(options)\n\t}\n\tfunction handleChange(event) {\n\t\tconsole.log(event)\n\t\tconst { name, value, type, checked } = event.target\n\t\tsetFormData((prevFormData) => {\n\t\t\treturn {\n\t\t\t\t...prevFormData,\n\t\t\t\t[name]: type === 'checkbox' ? checked : value,\n\t\t\t}\n\t\t})\n\t}\n\n\tfunction handleQuestionClick(questionId, answer) {\n\t\tif (!isChecked) {\n\t\t\tsetSelectedAnswers((prevState) => {\n\t\t\t\tconst newState = { ...prevState }\n\t\t\t\tnewState[questionId] = answer\n\t\t\t\treturn newState\n\t\t\t})\n\t\t}\n\t}\n\n\tReact.useEffect(() => {\n\t\tgetQuestions()\n\t}, [])\n\n\t// compare answers with correct answer\n\tfunction checkAnswers() {\n\t\tsetIsChecked(true)\n\t\tconst correctAnswers = questions.map((question) => question.correct_answer)\n\t\tlet count = 0\n\t\tObject.keys(selectedAnswers).map((key) => {\n\t\t\tif (selectedAnswers[key] === correctAnswers[key]) {\n\t\t\t\treturn count++\n\t\t\t}\n\t\t})\n\t\tsetScore((prevState) => {\n\t\t\tconst newState = { ...prevState }\n\t\t\tnewState[turn] = {\n\t\t\t\tturn: turn,\n\t\t\t\tcorrectsAnswers: count,\n\t\t\t\tquestions: questions.length,\n\t\t\t}\n\t\t\treturn newState\n\t\t})\n\t}\n\n\tfunction restartGame() {\n\t\tsetTurn((prevTurn) => prevTurn + 1)\n\t\tsetIsChecked(false)\n\t\tsetSelectedAnswers([])\n\t\tgetQuestions()\n\t}\n\n\t// map questions to question components\n\t// console.log(questions)\n\n\t// take all scores from score object and add them in a total score const\n\tconst totalScore = Object.values(score).reduce((acc, curr) => {\n\t\treturn acc + curr.correctsAnswers\n\t}, 0)\n\tconst totalQuestions = Object.values(score).reduce((acc, curr) => {\n\t\treturn acc + curr.questions\n\t}, 0)\n\tconst totalTurns = Object.keys(score).length\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t<Start />\n\t\t\t<Options options={options} handleOptionsChange={handleOptionsChange} />\n\t\t\t{/* {questions.map((question) => (\n\t\t\t\t<Question\n\t\t\t\t\tkey={nanoid()}\n\t\t\t\t\tid={questions.indexOf(question)}\n\t\t\t\t\tquestion={question.question}\n\t\t\t\t\tcategory={question.category}\n\t\t\t\t\tcorrect_answer={question.correct_answer}\n\t\t\t\t\tincorrect_answers={question.incorrect_answers}\n\t\t\t\t\tanswers={question.answers}\n\t\t\t\t\thandleQuestionClick={handleQuestionClick}\n\t\t\t\t\tselectedAnswer={selectedAnswers[questions.indexOf(question)]}\n\t\t\t\t\tisChecked={isChecked}\n\t\t\t\t/>\n\t\t\t))}\n\t\t\t<button className='check' onClick={isChecked ? restartGame : checkAnswers}>\n\t\t\t\t{isChecked ? 'Restart' : 'Check answers'}\n\t\t\t</button>\n\t\t\t<Results score={totalScore} totalQuestions={totalQuestions} totalTurns={totalTurns} /> */}\n\t\t</div>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}