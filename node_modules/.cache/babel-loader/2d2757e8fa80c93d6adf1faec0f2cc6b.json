{"ast":null,"code":"var _jsxFileName = \"/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './question.css';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Question(props) {\n  _s();\n\n  // randomize the answers\n  React.useEffect(() => {\n    const answers = [...props.incorrect_answers, props.correct_answer];\n    const shuffledAnswers = answers.sort(() => Math.random() - 0.5);\n    setAnswers(shuffledAnswers);\n  }, []);\n  const allAnswers = props.incorrect_answers.concat(props.correct_answer);\n  const shuffledAnswers = allAnswers.sort(() => Math.random() - 0.5);\n  const answers = shuffledAnswers.map(answer => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"answer\",\n    onClick: () => props.handleQuestionClick(props.id, props.question, answer),\n    children: answer\n  }, nanoid(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 3\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question--wrapper7\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"question\",\n      children: props.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"category\",\n      children: props.category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers\",\n      children: answers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Question, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js"],"names":["React","nanoid","Question","props","useEffect","answers","incorrect_answers","correct_answer","shuffledAnswers","sort","Math","random","setAnswers","allAnswers","concat","map","answer","handleQuestionClick","id","question","category"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvC;AAEDH,EAAAA,KAAK,CAACI,SAAN,CAAgB,MAAM;AACrB,UAAMC,OAAO,GAAG,CAAC,GAAGF,KAAK,CAACG,iBAAV,EAA6BH,KAAK,CAACI,cAAnC,CAAhB;AACA,UAAMC,eAAe,GAAGH,OAAO,CAACI,IAAR,CAAa,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAAnC,CAAxB;AACAC,IAAAA,UAAU,CAACJ,eAAD,CAAV;AACA,GAJD,EAIG,EAJH;AAOC,QAAMK,UAAU,GAAGV,KAAK,CAACG,iBAAN,CAAwBQ,MAAxB,CAA+BX,KAAK,CAACI,cAArC,CAAnB;AACA,QAAMC,eAAe,GAAGK,UAAU,CAACJ,IAAX,CAAgB,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAAtC,CAAxB;AAEA,QAAMN,OAAO,GAAGG,eAAe,CAACO,GAAhB,CAAqBC,MAAD,iBACnC;AAAQ,IAAA,SAAS,EAAC,QAAlB;AAA0C,IAAA,OAAO,EAAE,MAAMb,KAAK,CAACc,mBAAN,CAA0Bd,KAAK,CAACe,EAAhC,EAAoCf,KAAK,CAACgB,QAA1C,EAAoDH,MAApD,CAAzD;AAAA,cACEA;AADF,KAAgCf,MAAM,EAAtC;AAAA;AAAA;AAAA;AAAA,UADe,CAAhB;AAMA,sBACC;AAAK,IAAA,SAAS,EAAC,oBAAf;AAAA,4BACC;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BE,KAAK,CAACgB;AAAhC;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BhB,KAAK,CAACiB;AAAhC;AAAA;AAAA;AAAA;AAAA,YAFD,eAGC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBAA0Bf;AAA1B;AAAA;AAAA;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAOA;;GA1BuBH,Q;;KAAAA,Q","sourcesContent":["import React from 'react'\nimport './question.css'\nimport { nanoid } from 'nanoid'\n\nexport default function Question(props) {\n\t// randomize the answers\n\nReact.useEffect(() => {\n\tconst answers = [...props.incorrect_answers, props.correct_answer]\n\tconst shuffledAnswers = answers.sort(() => Math.random() - 0.5)\n\tsetAnswers(shuffledAnswers)\n}, [])\n\n\n\tconst allAnswers = props.incorrect_answers.concat(props.correct_answer)\n\tconst shuffledAnswers = allAnswers.sort(() => Math.random() - 0.5)\n\n\tconst answers = shuffledAnswers.map((answer) => (\n\t\t<button className='answer' key={nanoid()} onClick={() => props.handleQuestionClick(props.id, props.question, answer)}>\n\t\t\t{answer}\n\t\t</button>\n\t))\n\n\treturn (\n\t\t<div className='question--wrapper7'>\n\t\t\t<h1 className='question'>{props.question}</h1>\n\t\t\t<h2 className='category'>{props.category}</h2>\n\t\t\t<div className='answers'>{answers}</div>\n\t\t</div>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}