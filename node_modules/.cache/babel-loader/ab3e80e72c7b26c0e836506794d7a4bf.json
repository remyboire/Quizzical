{"ast":null,"code":"var _jsxFileName = \"/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './question.css';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Question(props) {\n  _s();\n\n  console.log(props);\n  const [shuffledAnswers, setShuffledAnswers] = React.useState([]);\n  React.useEffect(() => {\n    console.log();\n    setShuffledAnswers([...props.incorrect_answers, props.correct_answer].sort(() => Math.random() - 0.5));\n    console.log(shuffledAnswers);\n  }, []);\n  let sortedAnswers = shuffledAnswers.map(answer => /*#__PURE__*/_jsxDEV(\"button\", {\n    className: `answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${answer !== props.correct_answer && props.isChecked ? 'incorrect' : ''}`,\n    onClick: () => props.handleQuestionClick(props.id, props.question, answer),\n    children: answer\n  }, nanoid(), false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 3\n  }, this));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question--wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"question\",\n      children: props.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"category\",\n      children: props.category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers\",\n      children: sortedAnswers\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Question, \"NFVP8Hm7zZE6fGcOiRbXcb+B8ew=\");\n\n_c = Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js"],"names":["React","nanoid","Question","props","console","log","shuffledAnswers","setShuffledAnswers","useState","useEffect","incorrect_answers","correct_answer","sort","Math","random","sortedAnswers","map","answer","selectedAnswer","isChecked","handleQuestionClick","id","question","category"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,QAAM,CAACG,eAAD,EAAkBC,kBAAlB,IAAwCP,KAAK,CAACQ,QAAN,CAAe,EAAf,CAA9C;AAEAR,EAAAA,KAAK,CAACS,SAAN,CAAgB,MAAM;AACrBL,IAAAA,OAAO,CAACC,GAAR;AACAE,IAAAA,kBAAkB,CAAC,CAAC,GAAGJ,KAAK,CAACO,iBAAV,EAA6BP,KAAK,CAACQ,cAAnC,EAAmDC,IAAnD,CAAwD,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAA9E,CAAD,CAAlB;AACAV,IAAAA,OAAO,CAACC,GAAR,CAAYC,eAAZ;AACA,GAJD,EAIG,EAJH;AAMA,MAAIS,aAAa,GAAGT,eAAe,CAACU,GAAhB,CAAqBC,MAAD,iBACvC;AACC,IAAA,SAAS,EAAG,UAASd,KAAK,CAACe,cAAN,KAAyBD,MAAzB,GAAkC,UAAlC,GAA+C,EAAG,IAAGA,MAAM,KAAKd,KAAK,CAACQ,cAAjB,IAAmCR,KAAK,CAACgB,SAAzC,GAAqD,SAArD,GAAiE,EAAG,IAC7IF,MAAM,KAAKd,KAAK,CAACQ,cAAjB,IAAmCR,KAAK,CAACgB,SAAzC,GAAqD,WAArD,GAAmE,EACnE,EAHF;AAKC,IAAA,OAAO,EAAE,MAAMhB,KAAK,CAACiB,mBAAN,CAA0BjB,KAAK,CAACkB,EAAhC,EAAoClB,KAAK,CAACmB,QAA1C,EAAoDL,MAApD,CALhB;AAAA,cAOEA;AAPF,KAIMhB,MAAM,EAJZ;AAAA;AAAA;AAAA;AAAA,UADmB,CAApB;AAYA,sBACC;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,4BACC;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BE,KAAK,CAACmB;AAAhC;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BnB,KAAK,CAACoB;AAAhC;AAAA;AAAA;AAAA;AAAA,YAFD,eAGC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBAA0BR;AAA1B;AAAA;AAAA;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAOA;;GA7BuBb,Q;;KAAAA,Q","sourcesContent":["import React from 'react'\nimport './question.css'\nimport { nanoid } from 'nanoid'\n\nexport default function Question(props) {\n\tconsole.log(props)\n\tconst [shuffledAnswers, setShuffledAnswers] = React.useState([])\n\n\tReact.useEffect(() => {\n\t\tconsole.log()\n\t\tsetShuffledAnswers([...props.incorrect_answers, props.correct_answer].sort(() => Math.random() - 0.5))\n\t\tconsole.log(shuffledAnswers)\n\t}, [])\n\n\tlet sortedAnswers = shuffledAnswers.map((answer) => (\n\t\t<button\n\t\t\tclassName={`answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${\n\t\t\t\tanswer !== props.correct_answer && props.isChecked ? 'incorrect' : ''\n\t\t\t}`}\n\t\t\tkey={nanoid()}\n\t\t\tonClick={() => props.handleQuestionClick(props.id, props.question, answer)}\n\t\t>\n\t\t\t{answer}\n\t\t</button>\n\t))\n\n\treturn (\n\t\t<div className='question--wrapper'>\n\t\t\t<h1 className='question'>{props.question}</h1>\n\t\t\t<h2 className='category'>{props.category}</h2>\n\t\t\t<div className='answers'>{sortedAnswers}</div>\n\t\t</div>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}