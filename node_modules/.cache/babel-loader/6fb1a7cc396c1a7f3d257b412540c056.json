{"ast":null,"code":"var _jsxFileName = \"/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './App.css';\nimport Question from './components/Question';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function App() {\n  _s();\n\n  const [questions, setQuestions] = React.useState([]);\n  const [selectedAnswers, setSelectedAnswers] = React.useState([]);\n  const [isChecked, setIsChecked] = React.useState(false); // get data from api and return it\n\n  function getQuestions() {\n    fetch('https://opentdb.com/api.php?amount=5').then(res => res.json()).then(data => setQuestions(data.results)).catch(err => console.log(err));\n  }\n\n  function handleQuestionClick(questionId, question, answer) {\n    if (!isChecked) {\n      setSelectedAnswers(prevState => {\n        const newState = { ...prevState\n        };\n        newState[questionId] = answer;\n        return newState;\n      });\n    }\n  }\n\n  React.useEffect(() => {\n    getQuestions();\n  }, []);\n  React.useEffect(() => {\n    questions.map(question => {\n      const shuffledAnswers = 'answer';\n      setQuestions(prevState => {\n        const newState = [...prevState];\n        newState[question] = { ...question,\n          answers: shuffledAnswers\n        };\n        return newState;\n      });\n    });\n  }, []);\n  console.log(questions[0]); // \tquestions.forEach((question) => {\n  // const answers = question.incorrect_answers\n  // answers.push(question.correct_answer)\n  // question.answers = answers\n  // \t})\n  // }, [])\n  // compare answers with correct answer\n\n  function checkAnswers() {\n    setIsChecked(true);\n    const correctAnswers = questions.map(question => question.correct_answer); // for each selectedAnswer, if is in correctAnswers, set points +1\n    // if not, set points -1\n\n    const points = Object.keys(selectedAnswers).reduce((acc, key) => {\n      if (correctAnswers.includes(selectedAnswers[key])) {\n        return acc + 1;\n      } else {\n        return;\n      }\n    }, 0); // console.log(selectedAnswers)\n    // const numberOfCorrectAnswers = correctAnswers.map((answers) => (selectedAnswers.includes(answers) ? 1 : 0))\n    // console.log(numberOfCorrectAnswers)\n    //const correct = correctAnswers.filter((answer) => selectedAnswers[answer] === answer)\n    // console.log(correct.length)\n  } // map questions to question components\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [questions.map(question => /*#__PURE__*/_jsxDEV(Question, {\n      id: questions.indexOf(question),\n      question: question.question,\n      category: question.category,\n      correct_answer: question.correct_answer,\n      incorrect_answers: question.incorrect_answers,\n      answers: question.answers,\n      handleQuestionClick: handleQuestionClick,\n      selectedAnswer: selectedAnswers[questions.indexOf(question)],\n      isChecked: isChecked\n    }, nanoid(), false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 5\n    }, this)), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"check\",\n      onClick: checkAnswers,\n      children: \"Check Answers\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 3\n  }, this);\n}\n\n_s(App, \"rMlLwy+HARYuQoEKtejENTeyUQs=\");\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/remyboire/Documents/github/scrimba/quizzical/src/App.js"],"names":["React","Question","nanoid","App","questions","setQuestions","useState","selectedAnswers","setSelectedAnswers","isChecked","setIsChecked","getQuestions","fetch","then","res","json","data","results","catch","err","console","log","handleQuestionClick","questionId","question","answer","prevState","newState","useEffect","map","shuffledAnswers","answers","checkAnswers","correctAnswers","correct_answer","points","Object","keys","reduce","acc","key","includes","indexOf","category","incorrect_answers"],"mappings":"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","sourcesContent":["import React from 'react'\nimport './App.css'\nimport Question from './components/Question'\nimport { nanoid } from 'nanoid'\n\nexport default function App() {\n\tconst [questions, setQuestions] = React.useState([])\n\tconst [selectedAnswers, setSelectedAnswers] = React.useState([])\n\tconst [isChecked, setIsChecked] = React.useState(false)\n\n\t// get data from api and return it\n\tfunction getQuestions() {\n\t\tfetch('https://opentdb.com/api.php?amount=5')\n\t\t\t.then((res) => res.json())\n\t\t\t.then((data) => setQuestions(data.results))\n\t\t\t.catch((err) => console.log(err))\n\t}\n\n\tfunction handleQuestionClick(questionId, question, answer) {\n\t\tif (!isChecked) {\n\t\t\tsetSelectedAnswers((prevState) => {\n\t\t\t\tconst newState = { ...prevState }\n\t\t\t\tnewState[questionId] = answer\n\t\t\t\treturn newState\n\t\t\t})\n\t\t}\n\t}\n\n\tReact.useEffect(() => {\n\t\tgetQuestions()\n\t}, [])\n\n\tReact.useEffect(() => {\n\t\tquestions.map((question) => {\n\t\t\tconst shuffledAnswers = 'answer'\n\t\t\tsetQuestions((prevState) => {\n\t\t\t\tconst newState = [...prevState]\n\t\t\t\tnewState[question] = {\n\t\t\t\t\t...question,\n\t\t\t\t\tanswers: shuffledAnswers,\n\t\t\t\t}\n\t\t\t\treturn newState\n\t\t\t})\n\t\t})\n\t}, [])\n\n\tconsole.log(questions[0])\n\t// \tquestions.forEach((question) => {\n\t// const answers = question.incorrect_answers\n\t// answers.push(question.correct_answer)\n\t// question.answers = answers\n\t// \t})\n\t// }, [])\n\n\t// compare answers with correct answer\n\tfunction checkAnswers() {\n\t\tsetIsChecked(true)\n\t\tconst correctAnswers = questions.map((question) => question.correct_answer)\n\t\t// for each selectedAnswer, if is in correctAnswers, set points +1\n\t\t// if not, set points -1\n\t\tconst points = Object.keys(selectedAnswers).reduce((acc, key) => {\n\t\t\tif (correctAnswers.includes(selectedAnswers[key])) {\n\t\t\t\treturn acc + 1\n\t\t\t} else {\n\t\t\t\treturn\n\t\t\t}\n\t\t}, 0)\n\n\t\t// console.log(selectedAnswers)\n\t\t// const numberOfCorrectAnswers = correctAnswers.map((answers) => (selectedAnswers.includes(answers) ? 1 : 0))\n\t\t// console.log(numberOfCorrectAnswers)\n\t\t//const correct = correctAnswers.filter((answer) => selectedAnswers[answer] === answer)\n\t\t// console.log(correct.length)\n\t}\n\n\t// map questions to question components\n\n\treturn (\n\t\t<div className='App'>\n\t\t\t{questions.map((question) => (\n\t\t\t\t<Question\n\t\t\t\t\tkey={nanoid()}\n\t\t\t\t\tid={questions.indexOf(question)}\n\t\t\t\t\tquestion={question.question}\n\t\t\t\t\tcategory={question.category}\n\t\t\t\t\tcorrect_answer={question.correct_answer}\n\t\t\t\t\tincorrect_answers={question.incorrect_answers}\n\t\t\t\t\tanswers={question.answers}\n\t\t\t\t\thandleQuestionClick={handleQuestionClick}\n\t\t\t\t\tselectedAnswer={selectedAnswers[questions.indexOf(question)]}\n\t\t\t\t\tisChecked={isChecked}\n\t\t\t\t/>\n\t\t\t))}\n\t\t\t<button className='check' onClick={checkAnswers}>\n\t\t\t\tCheck Answers\n\t\t\t</button>\n\t\t</div>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}