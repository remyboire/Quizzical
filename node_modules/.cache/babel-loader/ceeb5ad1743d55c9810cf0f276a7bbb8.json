{"ast":null,"code":"var _jsxFileName = \"/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport './question.css';\nimport { nanoid } from 'nanoid';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Question(props) {\n  _s();\n\n  const [shuffledAnswers, setShuffledAnswers] = React.useState([]); // all answers equal props.incorrect_answers + props.correct_answer\n\n  React.useEffect(() => {\n    const answers = [...props.incorrect_answers, props.correct_answer];\n    const shuffledAnswers = answers.sort(() => Math.random() - 0.5);\n    setShuffledAnswers(shuffledAnswers);\n  }, []);\n\n  function shuffle(array) {\n    let currentIndex = array.length,\n        temporaryValue,\n        randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n\n    return array;\n  } // React.useEffect(() => {\n  // \tconsole.log('shuffling answers')\n  // \tsetShuffledAnswers(shuffle(allAnswers))\n  // }, [])\n  // let sortedAnswers = shuffledAnswers.map((answer) => (\n  // \t<button\n  // \t\tclassName={`answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${\n  // \t\t\tanswer !== props.correct_answer && props.isChecked ? 'incorrect' : ''\n  // \t\t}`}\n  // \t\tkey={nanoid()}\n  // \t\tonClick={() => props.handleQuestionClick(props.id, props.question, answer)}\n  // \t>\n  // \t\t{answer}\n  // \t</button>\n  // ))\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"question--wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"question\",\n      children: props.question\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"category\",\n      children: props.category\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"answers\",\n      children: shuffledAnswers.map(answer => /*#__PURE__*/_jsxDEV(\"button\", {\n        className: `answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${answer !== props.correct_answer && props.isChecked ? 'incorrect' : ''}`,\n        onClick: () => props.handleQuestionClick(props.question_id, props.question, answer),\n        children: answer\n      }, nanoid(), false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 6\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 3\n  }, this);\n}\n\n_s(Question, \"NFVP8Hm7zZE6fGcOiRbXcb+B8ew=\");\n\n_c = Question;\n\nvar _c;\n\n$RefreshReg$(_c, \"Question\");","map":{"version":3,"sources":["/Users/remyboire/Documents/github/scrimba/quizzical/src/components/Question.js"],"names":["React","nanoid","Question","props","shuffledAnswers","setShuffledAnswers","useState","useEffect","answers","incorrect_answers","correct_answer","sort","Math","random","shuffle","array","currentIndex","length","temporaryValue","randomIndex","floor","question","category","map","answer","selectedAnswer","isChecked","handleQuestionClick","question_id"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAO,gBAAP;AACA,SAASC,MAAT,QAAuB,QAAvB;;AAEA,eAAe,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA;;AACvC,QAAM,CAACC,eAAD,EAAkBC,kBAAlB,IAAwCL,KAAK,CAACM,QAAN,CAAe,EAAf,CAA9C,CADuC,CAEvC;;AACAN,EAAAA,KAAK,CAACO,SAAN,CAAgB,MAAM;AACrB,UAAMC,OAAO,GAAG,CAAC,GAAGL,KAAK,CAACM,iBAAV,EAA6BN,KAAK,CAACO,cAAnC,CAAhB;AACA,UAAMN,eAAe,GAAGI,OAAO,CAACG,IAAR,CAAa,MAAMC,IAAI,CAACC,MAAL,KAAgB,GAAnC,CAAxB;AACAR,IAAAA,kBAAkB,CAACD,eAAD,CAAlB;AACA,GAJD,EAIG,EAJH;;AAMA,WAASU,OAAT,CAAiBC,KAAjB,EAAwB;AACvB,QAAIC,YAAY,GAAGD,KAAK,CAACE,MAAzB;AAAA,QACCC,cADD;AAAA,QAECC,WAFD;;AAGA,WAAO,MAAMH,YAAb,EAA2B;AAC1BG,MAAAA,WAAW,GAAGP,IAAI,CAACQ,KAAL,CAAWR,IAAI,CAACC,MAAL,KAAgBG,YAA3B,CAAd;AACAA,MAAAA,YAAY,IAAI,CAAhB;AACAE,MAAAA,cAAc,GAAGH,KAAK,CAACC,YAAD,CAAtB;AACAD,MAAAA,KAAK,CAACC,YAAD,CAAL,GAAsBD,KAAK,CAACI,WAAD,CAA3B;AACAJ,MAAAA,KAAK,CAACI,WAAD,CAAL,GAAqBD,cAArB;AACA;;AACD,WAAOH,KAAP;AACA,GArBsC,CAuBvC;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,sBACC;AAAK,IAAA,SAAS,EAAC,mBAAf;AAAA,4BACC;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BZ,KAAK,CAACkB;AAAhC;AAAA;AAAA;AAAA;AAAA,YADD,eAEC;AAAI,MAAA,SAAS,EAAC,UAAd;AAAA,gBAA0BlB,KAAK,CAACmB;AAAhC;AAAA;AAAA;AAAA;AAAA,YAFD,eAGC;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,gBACElB,eAAe,CAACmB,GAAhB,CAAqBC,MAAD,iBACpB;AAEC,QAAA,SAAS,EAAG,UAASrB,KAAK,CAACsB,cAAN,KAAyBD,MAAzB,GAAkC,UAAlC,GAA+C,EAAG,IAAGA,MAAM,KAAKrB,KAAK,CAACO,cAAjB,IAAmCP,KAAK,CAACuB,SAAzC,GAAqD,SAArD,GAAiE,EAAG,IAC7IF,MAAM,KAAKrB,KAAK,CAACO,cAAjB,IAAmCP,KAAK,CAACuB,SAAzC,GAAqD,WAArD,GAAmE,EACnE,EAJF;AAKC,QAAA,OAAO,EAAE,MAAMvB,KAAK,CAACwB,mBAAN,CAA0BxB,KAAK,CAACyB,WAAhC,EAA6CzB,KAAK,CAACkB,QAAnD,EAA6DG,MAA7D,CALhB;AAAA,kBAOEA;AAPF,SACMvB,MAAM,EADZ;AAAA;AAAA;AAAA;AAAA,cADA;AADF;AAAA;AAAA;AAAA;AAAA,YAHD;AAAA;AAAA;AAAA;AAAA;AAAA,UADD;AAmBA;;GA3DuBC,Q;;KAAAA,Q","sourcesContent":["import React from 'react'\nimport './question.css'\nimport { nanoid } from 'nanoid'\n\nexport default function Question(props) {\n\tconst [shuffledAnswers, setShuffledAnswers] = React.useState([])\n\t// all answers equal props.incorrect_answers + props.correct_answer\n\tReact.useEffect(() => {\n\t\tconst answers = [...props.incorrect_answers, props.correct_answer]\n\t\tconst shuffledAnswers = answers.sort(() => Math.random() - 0.5)\n\t\tsetShuffledAnswers(shuffledAnswers)\n\t}, [])\n\n\tfunction shuffle(array) {\n\t\tlet currentIndex = array.length,\n\t\t\ttemporaryValue,\n\t\t\trandomIndex\n\t\twhile (0 !== currentIndex) {\n\t\t\trandomIndex = Math.floor(Math.random() * currentIndex)\n\t\t\tcurrentIndex -= 1\n\t\t\ttemporaryValue = array[currentIndex]\n\t\t\tarray[currentIndex] = array[randomIndex]\n\t\t\tarray[randomIndex] = temporaryValue\n\t\t}\n\t\treturn array\n\t}\n\n\t// React.useEffect(() => {\n\t// \tconsole.log('shuffling answers')\n\t// \tsetShuffledAnswers(shuffle(allAnswers))\n\t// }, [])\n\n\t// let sortedAnswers = shuffledAnswers.map((answer) => (\n\t// \t<button\n\t// \t\tclassName={`answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${\n\t// \t\t\tanswer !== props.correct_answer && props.isChecked ? 'incorrect' : ''\n\t// \t\t}`}\n\t// \t\tkey={nanoid()}\n\t// \t\tonClick={() => props.handleQuestionClick(props.id, props.question, answer)}\n\t// \t>\n\t// \t\t{answer}\n\t// \t</button>\n\t// ))\n\n\treturn (\n\t\t<div className='question--wrapper'>\n\t\t\t<h1 className='question'>{props.question}</h1>\n\t\t\t<h2 className='category'>{props.category}</h2>\n\t\t\t<div className='answers'>\n\t\t\t\t{shuffledAnswers.map((answer) => (\n\t\t\t\t\t<button\n\t\t\t\t\t\tkey={nanoid()}\n\t\t\t\t\t\tclassName={`answer ${props.selectedAnswer === answer ? 'selected' : ''} ${answer === props.correct_answer && props.isChecked ? 'correct' : ''} ${\n\t\t\t\t\t\t\tanswer !== props.correct_answer && props.isChecked ? 'incorrect' : ''\n\t\t\t\t\t\t}`}\n\t\t\t\t\t\tonClick={() => props.handleQuestionClick(props.question_id, props.question, answer)}\n\t\t\t\t\t>\n\t\t\t\t\t\t{answer}\n\t\t\t\t\t</button>\n\t\t\t\t))}\n\t\t\t</div>\n\t\t</div>\n\t)\n}\n"]},"metadata":{},"sourceType":"module"}